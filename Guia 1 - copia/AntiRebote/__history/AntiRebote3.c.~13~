#include <AntiRebote3.h>

#fuses INTRC_IO   // Oscilador interno con pines RA6 y RA7 como GPIO
#fuses NOMCLR     // Desactivo el MCLR
#fuses NOWDT      // Desactivo el watchdog

/*****************************************************************************
 * LCD
 ****************************************************************************/

#define LCD_ENABLE_PIN  PIN_B0
#define LCD_RS_PIN      PIN_B1
#define LCD_RW_PIN      PIN_B2
#define LCD_DATA4       PIN_B4
#define LCD_DATA5       PIN_B5
#define LCD_DATA6       PIN_B6
#define LCD_DATA7       PIN_B7
#include <lcd.c>

/*****************************************************************************
 * Funciones de Inicializacion de Perifericos
 ****************************************************************************/
 
 /*typedef enum {
    SUELTO,
    Q_PRESIONADO,
    PRESIONADO,
    Q_SUELTO
} eEstado;*/

typedef enum {
   SUELTO,
   REBOTANDO_PRES,
   PRESIONADO,
   REBOTANDO_SUELTO
} eEstado;

eEstado estado_actual = SUELTO;

int16 contador = 0;
int valor = 0;

//FUNCIONES
void MaquinaEstado(void);
void InitGPIO(void);
void EscribirDisplay(signed int valor);
int8 EstadoPulsador(void);
void InitTimer0(void);


#INT_TIMER0 // ACA ESCRIBO QUÉ DEBO HACER EN CADA INTERRUPCIÓN
void Timer0_ISR() {
   set_timer0(178);   // Reinicio el timer 0
   contador++; //incremento el contador
}

/*****************************************************************************
 * Main
 ****************************************************************************/

void main(void) {
   
   InitGPIO();    // Inicializo el PORTA y PORTB
   lcd_init();// Inicializo LCD
   InitTimer0();
  
   printf(LCD_PUTC,"Cuenta: %d",valor);
   estado_actual=SUELTO;
   while (TRUE) {
      if( overflow_count >= 1) {
         overflow_count = 0;
         MaquinaEstado();
      }
   }
}

/*****************************************************************************
 * Implementacion de funciones
 ****************************************************************************/
 
void InitGPIO(void){
    set_tris_a(0xFF);   // PORTA como ENTRADA
    set_tris_b(0x00);   // PORTB como SALIDA
    output_b(0x00); //inicialuizo en 0
}

void EscribirDisplay(signed int valor) {
   lcd_putc('\f');
   printf(LCD_PUTC,"Cuenta: %d",valor);
}

int8 EstadoPulsador(void)
{
   int8 res = 0;
   res = input(PIN_A0);
   return res;
}

void InitTimer0(void){
   
    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256); // Configuro prescaler y osc
    
    set_timer0(178);                  // Reinicio el timer
    enable_interrupts(INT_TIMER0);    // Desactivo Interrupcion timer1
    enable_interrupts(GLOBAL);        // Desactivo Interrupciones globales
}

void MaquinaEstado(void){
    int boton = EstadoPulsador(); //funcion q cambia el estado

    switch(estado_actual) {

      case SUELTO:
         if(boton == 0) {                // detecto flanco descendente
            estado_actual = REBOTANDO_PRES;
            contador = 0;
         }
         break;

      case REBOTANDO_PRES:
         if(contador >= 20) {            // 20 ms anti-rebote
            if(boton == 0) {
               estado_actual = PRESIONADO;   // confirmado presionado
            } else {
               estado_actual = SUELTO;       // fue rebote
            }
         }
         break;

      case PRESIONADO:
         if(boton == 1) {                // detecto que se soltó
            estado_actual = REBOTANDO_SUELTO;
            contador = 0;
         }
         break;

      case REBOTANDO_SUELTO:
         if(contador >= 20) {            // 20 ms anti-rebote
            if(boton == 1) {
               valor++;                   // cuenta cuando se soltó estable
               EscribirDisplay(valor);
               estado_actual = SUELTO;
            } else {
               estado_actual = PRESIONADO; // fue rebote
            }
         }
         break;
   }
}
