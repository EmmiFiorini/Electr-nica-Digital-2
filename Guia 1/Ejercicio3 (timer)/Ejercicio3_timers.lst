CCS PCM C Compiler, Version 5.093, 4770               05-sept-25 13:07

               Filename:   C:\Users\MPF\Desktop\Electr-nica-Digital-2\Guia 1\Ejercicio3 (timer)\Ejercicio3_timers.lst

               ROM used:   134 words (3%)
                           Largest free fragment is 2048
               RAM used:   14 (4%) at main() level
                           25 (7%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 16

0000:  MOVLP  00
0001:  GOTO   045
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  BTFSS  0B.5
0010:  GOTO   013
0011:  BTFSC  0B.2
0012:  GOTO   01C
0013:  MOVF   20,W
0014:  MOVWF  77
0015:  MOVF   21,W
0016:  MOVWF  78
0017:  MOVF   22,W
0018:  MOVWF  79
0019:  MOVF   23,W
001A:  MOVWF  7A
001B:  RETFIE
001C:  MOVLP  00
001D:  GOTO   01E
.................... #include <Ejercicio3_timers.h>
.................... #include <16F1827.h>
.................... //////////// Standard Header file for the PIC16F1827 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1827
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(internal=4MHz)
.................... 
.................... 
.................... 
.................... #fuses INTRC_IO   // Utilizo oscilador interno con pines RA6 y RA7 como GPIO
.................... #fuses NOMCLR     // Desactivo el MCLR
.................... #fuses NOWDT      // Desactivo el watchdog
.................... 
.................... /*****************************************************************************
....................  * Funciones de Inicializacion de Perifericos
....................  ****************************************************************************/
.................... void InitGPIO(void);
.................... void InitTimer0(void); //inicializo timer
.................... 
.................... 
.................... int contador= 0;
.................... int led_activo= 0; // 1= led encendido esperando a que pasen los 500ms
.................... 
.................... 
.................... //INTERRUPCIONES
.................... #INT_TIMER0
.................... void TIMER0_ISR() {
....................    if (led_activo) {
*
001E:  MOVF   25,F
001F:  BTFSC  03.2
0020:  GOTO   02D
....................    contador++; 
0021:  INCF   24,F
....................       if (contador >= 8) {  //despues de 8 "vueltas", aprox 524 ms
0022:  MOVF   24,W
0023:  SUBLW  07
0024:  BTFSC  03.0
0025:  GOTO   02D
....................          output_low(PIN_B2); 
0026:  MOVLB  01
0027:  BCF    0D.2
0028:  MOVLB  02
0029:  BCF    0D.2
....................          led_activo=0; 
002A:  MOVLB  00
002B:  CLRF   25
....................          contador=0; 
002C:  CLRF   24
....................       }
....................    }
002D:  BCF    0B.2
002E:  MOVLP  00
002F:  GOTO   013
.................... }
.................... 
.................... 
.................... /*****************************************************************************
....................  * Main
....................  ****************************************************************************/
.................... 
.................... void main(void) { 
*
0045:  MOVLW  6A
0046:  MOVLB  01
0047:  MOVWF  19
0048:  MOVLB  00
0049:  CLRF   24
004A:  CLRF   25
004B:  MOVLB  03
004C:  CLRF   0C
004D:  CLRF   0D
004E:  MOVLB  02
004F:  CLRF   12
0050:  CLRF   11
0051:  CLRF   14
0052:  CLRF   13
.................... 
....................    InitGPIO(); // Inicializo PORTB
0053:  MOVLB  00
0054:  GOTO   030
....................    InitTimer0();
0055:  GOTO   039
....................    
....................    while(TRUE) { 
....................    
....................       // Leo el estado de RB4-RB7
....................       int sw4 = input(PIN_B4); 
....................       int sw5 = input(PIN_B5);
....................       int sw6 = input(PIN_B6); 
....................       int sw7 = input(PIN_B7);
0056:  MOVLB  01
0057:  BSF    0D.4
*
005C:  MOVLB  01
005D:  BSF    0D.5
*
0062:  MOVLB  01
0063:  BSF    0D.6
*
0068:  MOVLB  01
0069:  BSF    0D.7
.................... 
....................       // Si hay alguna entrada en esos pines
....................       if((sw4 || sw5 || sw6 || sw7) && !led_activo) {
*
006E:  MOVF   26,F
006F:  BTFSS  03.2
0070:  GOTO   07A
0071:  MOVF   27,F
0072:  BTFSS  03.2
0073:  GOTO   07A
0074:  MOVF   28,F
0075:  BTFSS  03.2
0076:  GOTO   07A
0077:  MOVF   29,F
0078:  BTFSC  03.2
0079:  GOTO   085
007A:  MOVF   25,F
007B:  BTFSS  03.2
007C:  GOTO   085
....................          output_high(PIN_B2);  // Prendo LED
007D:  MOVLB  01
007E:  BCF    0D.2
007F:  MOVLB  02
0080:  BSF    0D.2
....................          led_activo=1; // marco que el LED esta activo 
0081:  MOVLW  01
0082:  MOVLB  00
0083:  MOVWF  25
....................          contador=0; // reseteo cuenta de timer0
0084:  CLRF   24
....................       }
0085:  GOTO   056
....................    }
.................... }
.................... 
0086:  SLEEP
.................... void InitGPIO(void){ 
....................       set_tris_b(0b10111111); // RB2 salida, resto entradas 
*
0030:  MOVLW  BF
0031:  MOVLB  01
0032:  MOVWF  0D
....................       output_low(PIN_B2); // LED apagado al inicio 
0033:  BCF    0D.2
0034:  MOVLB  02
0035:  BCF    0D.2
0036:  MOVLP  00
0037:  MOVLB  00
0038:  GOTO   055 (RETURN)
.................... }
.................... 
.................... void InitTimer0(void){
....................    setup_timer_0(RTCC_INTERNAL | RTCC_8_BIT | RTCC_DIV_256); // Timer0 interno con prescaler maximo
0039:  MOVLB  01
003A:  MOVF   15,W
003B:  ANDLW  C0
003C:  IORLW  07
003D:  MOVWF  15
....................    set_timer0(0); // precarga inicial
003E:  MOVLB  00
003F:  CLRF   15
....................    enable_interrupts(INT_TIMER0);
0040:  BSF    0B.5
....................    enable_interrupts(GLOBAL);
0041:  MOVLW  C0
0042:  IORWF  0B,F
0043:  MOVLP  00
0044:  GOTO   056 (RETURN)
.................... }
.................... 
.................... 
.................... 
.................... 

Configuration Fuses:
   Word  1: 3F84   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT PLL_SW STVREN BORV19 NODEBUG NOLVP
