CCS PCM C Compiler, Version 5.093, 4770               16-sept-25 18:13

               Filename:   C:\Users\santi\OneDrive\Escritorio\EDI2\TP1\Timers_EJ4.lst

               ROM used:   292 words (7%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           27 (7%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 16

0000:  MOVLP  00
0001:  GOTO   10B
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  BTFSS  0B.3
0010:  GOTO   013
0011:  BTFSC  0B.0
0012:  GOTO   020
0013:  BTFSS  0B.5
0014:  GOTO   017
0015:  BTFSC  0B.2
0016:  GOTO   022
0017:  MOVF   20,W
0018:  MOVWF  77
0019:  MOVF   21,W
001A:  MOVWF  78
001B:  MOVF   22,W
001C:  MOVWF  79
001D:  MOVF   23,W
001E:  MOVWF  7A
001F:  RETFIE
0020:  MOVLP  00
0021:  GOTO   052
0022:  MOVLP  00
0023:  GOTO   024
.................... #include <Timers_EJ4.h>
.................... #include <16F1827.h>
.................... //////////// Standard Header file for the PIC16F1827 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1827
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(internal=4MHz)
.................... 
.................... 
.................... 
.................... #fuses INTRC_IO   // Utilizo oscilador interno con pines RA6 y RA7 como GPIO
.................... #fuses NOMCLR     // Desactivo el MCLR
.................... #fuses NOWDT // Desactivo el watchdog
.................... 
.................... /*****************************************************************************
....................  * Variables globales
....................  ****************************************************************************/
.................... 
.................... int contador_ms = 0;
.................... 
.................... int flag_RB4 = 0;
.................... int flag_RB5 = 0;
.................... int flag_RB6 = 0;
.................... int flag_RB7 = 0;
.................... 
.................... int flag_RB2_high = 1;
.................... int flag_RB1_high = 0;
.................... 
.................... 
.................... /*****************************************************************************
....................  * Funciones de Inicializacion de Perifericos
....................  ****************************************************************************/
.................... 
.................... void Init_GPIO();
.................... 
.................... /*****************************************************************************
.................... * Funciones
.................... ****************************************************************************/
.................... 
.................... void InitTimer0(void);
.................... void maquina();
.................... 
.................... /*****************************************************************************
.................... * Interrupciones
.................... ****************************************************************************/
.................... 
.................... #INT_TIMER0 // ACA ESCRIBO QUÉ DEBO HACER EN CADA INTERRUPCIÓN
.................... void Timer0_ISR() {
....................    
....................    set_timer0(61);
0024:  MOVLW  3D
0025:  MOVWF  15
....................    
....................    /* INTERRUPCION RB4 */
....................    if(flag_RB4 == 1 && contador_ms >= 10) {
0026:  DECFSZ 25,W
0027:  GOTO   033
0028:  MOVF   24,W
0029:  SUBLW  09
002A:  BTFSC  03.0
002B:  GOTO   033
....................       output_low(PIN_B0);
002C:  MOVLB  01
002D:  BCF    0D.0
002E:  MOVLB  02
002F:  BCF    0D.0
....................       contador_ms = 0;
0030:  MOVLB  00
0031:  CLRF   24
....................       flag_RB4 = 0;
0032:  CLRF   25
....................    }
....................    
....................    /* INTERRUPCION RB5 */
....................    if(flag_RB5 == 1 && contador_ms >= 20) {
0033:  DECFSZ 26,W
0034:  GOTO   040
0035:  MOVF   24,W
0036:  SUBLW  13
0037:  BTFSC  03.0
0038:  GOTO   040
....................       output_high(PIN_B1);
0039:  MOVLB  01
003A:  BCF    0D.1
003B:  MOVLB  02
003C:  BSF    0D.1
....................       flag_RB1_high = 1;
003D:  MOVLW  01
003E:  MOVLB  00
003F:  MOVWF  2A
....................    }
....................    if(flag_RB1_high == 1 && contador_ms >= 40) {
0040:  DECFSZ 2A,W
0041:  GOTO   04E
0042:  MOVF   24,W
0043:  SUBLW  27
0044:  BTFSC  03.0
0045:  GOTO   04E
....................       output_low(PIN_B1);
0046:  MOVLB  01
0047:  BCF    0D.1
0048:  MOVLB  02
0049:  BCF    0D.1
....................       contador_ms = 0;
004A:  MOVLB  00
004B:  CLRF   24
....................       flag_RB5 = 0;
004C:  CLRF   26
....................       flag_RB1_high = 0;
004D:  CLRF   2A
....................    }
....................    
....................    /* INTERRUPCION RB6 */
....................    
....................    
....................    
....................    contador_ms++;
004E:  INCF   24,F
.................... }
.................... 
004F:  BCF    0B.2
0050:  MOVLP  00
0051:  GOTO   017
.................... #INT_RB
.................... void RB_ISR(void) {
0052:  MOVLW  FF
0053:  MOVLB  01
0054:  MOVWF  0D
0055:  MOVLB  00
0056:  MOVF   0D,W
0057:  MOVWF  2B
....................    int estadoB = input_b(); // Leo todo el puerto B
.................... 
....................    if(bit_test(estadoB, 4)) {//Veo de qué puerto se emitió la interrupción '1'
0058:  BTFSS  2B.4
0059:  GOTO   05C
....................       flag_RB4 = 1;
005A:  MOVLW  01
005B:  MOVWF  25
....................    }
....................    if(bit_test(estadoB, 5)) {
005C:  BTFSS  2B.5
005D:  GOTO   060
....................       flag_RB5 = 1;
005E:  MOVLW  01
005F:  MOVWF  26
....................    }
....................    if(bit_test(estadoB, 6)) {
0060:  BTFSS  2B.6
0061:  GOTO   064
....................       flag_RB6 = 1;
0062:  MOVLW  01
0063:  MOVWF  27
....................    }
....................    if(bit_test(estadoB, 7)) {
0064:  BTFSS  2B.7
0065:  GOTO   068
....................       flag_RB7 = 1;
0066:  MOVLW  01
0067:  MOVWF  28
....................    }
0068:  MOVLW  FF
0069:  MOVLB  07
006A:  XORWF  16,W
006B:  ANDWF  16,F
006C:  BCF    0B.0
006D:  MOVLP  00
006E:  MOVLB  00
006F:  GOTO   017
.................... }
.................... 
.................... 
.................... 
.................... 
.................... void main()
*
010B:  MOVLW  6A
010C:  MOVLB  01
010D:  MOVWF  19
010E:  MOVLB  00
010F:  CLRF   24
0110:  CLRF   25
0111:  CLRF   26
0112:  CLRF   27
0113:  CLRF   28
0114:  MOVLW  01
0115:  MOVWF  29
0116:  CLRF   2A
0117:  MOVLB  03
0118:  CLRF   0C
0119:  CLRF   0D
011A:  MOVLB  02
011B:  CLRF   12
011C:  CLRF   11
011D:  CLRF   14
011E:  CLRF   13
.................... {
.................... 
.................... Init_GPIO();
011F:  MOVLB  00
0120:  GOTO   070
.................... InitTimer0();
0121:  GOTO   09D
.................... 
....................    while(TRUE) {
....................       maquina();
0122:  GOTO   0A8
0123:  GOTO   122
....................    }
.................... 
.................... }
.................... 
0124:  SLEEP
.................... void Init_GPIO()
.................... {
.................... /* SETEAMOS LOS PINES PB0-3 y PA0-3 COMO SALIDA */
....................    set_tris_b(0b11110000);
*
0070:  MOVLW  F0
0071:  MOVLB  01
0072:  MOVWF  0D
....................    set_tris_a(0b11110000);
0073:  MOVWF  0C
.................... 
....................    output_low(PIN_B0);
0074:  BCF    0D.0
0075:  MOVLB  02
0076:  BCF    0D.0
....................    output_low(PIN_B1);
0077:  MOVLB  01
0078:  BCF    0D.1
0079:  MOVLB  02
007A:  BCF    0D.1
....................    output_high(PIN_B2);
007B:  MOVLB  01
007C:  BCF    0D.2
007D:  MOVLB  02
007E:  BSF    0D.2
....................    output_low(PIN_B3);
007F:  MOVLB  01
0080:  BCF    0D.3
0081:  MOVLB  02
0082:  BCF    0D.3
....................    
....................    output_low(PIN_A0);
0083:  MOVLB  01
0084:  BCF    0C.0
0085:  MOVLB  02
0086:  BCF    0C.0
....................    output_low(PIN_A1);
0087:  MOVLB  01
0088:  BCF    0C.1
0089:  MOVLB  02
008A:  BCF    0C.1
....................    output_low(PIN_A2);
008B:  MOVLB  01
008C:  BCF    0C.2
008D:  MOVLB  02
008E:  BCF    0C.2
....................    output_low(PIN_A3);
008F:  MOVLB  01
0090:  BCF    0C.3
0091:  MOVLB  02
0092:  BCF    0C.3
....................    
....................    enable_interrupts(INT_RB);// HABILITO INTERRUPCIONES EN LOS PINES RB4–RB7
0093:  BSF    0B.3
0094:  MOVLW  FF
0095:  MOVLB  07
0096:  IORWF  11,F
0097:  IORWF  12,F
....................    enable_interrupts(GLOBAL);
0098:  MOVLW  C0
0099:  IORWF  0B,F
009A:  MOVLP  00
009B:  MOVLB  00
009C:  GOTO   121 (RETURN)
.................... }
.................... 
.................... void InitTimer0(void){
....................    
....................     setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256); // Configuro prescaler
009D:  MOVLB  01
009E:  MOVF   15,W
009F:  ANDLW  C0
00A0:  IORLW  07
00A1:  MOVWF  15
....................     
....................     set_timer0(61);                  // Reinicio el timer --> Interrupciones cada 50ms
00A2:  MOVLW  3D
00A3:  MOVLB  00
00A4:  MOVWF  15
....................     enable_interrupts(INT_TIMER0);    // Activo Interrupcion timer0
00A5:  BSF    0B.5
00A6:  MOVLP  00
00A7:  GOTO   122 (RETURN)
.................... }
.................... 
.................... void maquina() {
.................... 
....................    if(flag_RB4 == 1) {
00A8:  DECFSZ 25,W
00A9:  GOTO   0AF
....................       output_high(PIN_B0);
00AA:  MOVLB  01
00AB:  BCF    0D.0
00AC:  MOVLB  02
00AD:  BSF    0D.0
00AE:  MOVLB  00
....................    }
....................    
....................    
....................    if(flag_RB6 == 1) { //PASO LOS ESTADOS SEGÚN SE ESTE CORRIENDO OTRA INTERRUPCIÓN
00AF:  DECFSZ 27,W
00B0:  GOTO   0E8
....................          
....................          /* RB4 */
....................          if(flag_RB4 == 1) {
00B1:  DECFSZ 25,W
00B2:  GOTO   0B9
....................          output_high(PIN_A0);
00B3:  MOVLB  01
00B4:  BCF    0C.0
00B5:  MOVLB  02
00B6:  BSF    0C.0
....................          }
00B7:  GOTO   0BD
00B8:  MOVLB  00
....................          else{
....................          output_low(PIN_A0);
00B9:  MOVLB  01
00BA:  BCF    0C.0
00BB:  MOVLB  02
00BC:  BCF    0C.0
....................          }
....................          
....................          /* RB5 */
....................          if(flag_RB5 == 1) {
00BD:  MOVLB  00
00BE:  DECFSZ 26,W
00BF:  GOTO   0C6
....................          output_high(PIN_A1);
00C0:  MOVLB  01
00C1:  BCF    0C.1
00C2:  MOVLB  02
00C3:  BSF    0C.1
....................          }
00C4:  GOTO   0CA
00C5:  MOVLB  00
....................          else{
....................          output_low(PIN_A1);
00C6:  MOVLB  01
00C7:  BCF    0C.1
00C8:  MOVLB  02
00C9:  BCF    0C.1
....................          }
....................          
....................          /* RB7 */
....................          if(flag_RB7 == 1 && flag_RB2_high == 1) {
00CA:  MOVLB  00
00CB:  DECFSZ 28,W
00CC:  GOTO   0D9
00CD:  DECFSZ 29,W
00CE:  GOTO   0D9
....................          output_high(PIN_A2);
00CF:  MOVLB  01
00D0:  BCF    0C.2
00D1:  MOVLB  02
00D2:  BSF    0C.2
....................          output_low(PIN_A3);
00D3:  MOVLB  01
00D4:  BCF    0C.3
00D5:  MOVLB  02
00D6:  BCF    0C.3
....................          }
00D7:  GOTO   0E6
00D8:  MOVLB  00
....................          else if(flag_RB7 == 1 && flag_RB2_high != 1) {
00D9:  DECFSZ 28,W
00DA:  GOTO   0E7
00DB:  DECFSZ 29,W
00DC:  GOTO   0DE
00DD:  GOTO   0E7
....................          output_low(PIN_A2);
00DE:  MOVLB  01
00DF:  BCF    0C.2
00E0:  MOVLB  02
00E1:  BCF    0C.2
....................          output_low(PIN_A3);
00E2:  MOVLB  01
00E3:  BCF    0C.3
00E4:  MOVLB  02
00E5:  BCF    0C.3
00E6:  MOVLB  00
....................          }
....................          
....................          flag_RB6 = 0;
00E7:  CLRF   27
....................       }
....................        
....................        
....................       if(flag_RB7 == 1 && flag_RB2_high == 1) {
00E8:  DECFSZ 28,W
00E9:  GOTO   0F8
00EA:  DECFSZ 29,W
00EB:  GOTO   0F8
....................          output_low(PIN_B2);
00EC:  MOVLB  01
00ED:  BCF    0D.2
00EE:  MOVLB  02
00EF:  BCF    0D.2
....................          output_high(PIN_B3);
00F0:  MOVLB  01
00F1:  BCF    0D.3
00F2:  MOVLB  02
00F3:  BSF    0D.3
....................          flag_RB2_high = 0;
00F4:  MOVLB  00
00F5:  CLRF   29
....................          flag_RB7 = 0;
00F6:  CLRF   28
....................       }
00F7:  GOTO   109
....................       else if(flag_RB7 == 1 && flag_RB2_high != 1) {
00F8:  DECFSZ 28,W
00F9:  GOTO   109
00FA:  DECFSZ 29,W
00FB:  GOTO   0FD
00FC:  GOTO   109
....................          output_low(PIN_B3);
00FD:  MOVLB  01
00FE:  BCF    0D.3
00FF:  MOVLB  02
0100:  BCF    0D.3
....................          output_high(PIN_B2);
0101:  MOVLB  01
0102:  BCF    0D.2
0103:  MOVLB  02
0104:  BSF    0D.2
....................          flag_RB2_high = 1;
0105:  MOVLW  01
0106:  MOVLB  00
0107:  MOVWF  29
....................          flag_RB7 = 0;
0108:  CLRF   28
....................       }
0109:  MOVLP  00
010A:  GOTO   123 (RETURN)
.................... }

Configuration Fuses:
   Word  1: 3F84   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT PLL_SW STVREN BORV19 NODEBUG NOLVP
