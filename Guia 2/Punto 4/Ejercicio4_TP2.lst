CCS PCM C Compiler, Version 5.093, 4770               19-sep.-25 14:24

               Filename:   C:\Users\MPF\Desktop\Git\Electr-nica-Digital-2\Guia 2\Punto 4\Ejercicio4_TP2.lst

               ROM used:   559 words (14%)
                           Largest free fragment is 2048
               RAM used:   25 (7%) at main() level
                           47 (12%) worst case
               Stack used: 4 locations
               Stack size: 16

0000:  MOVLP  00
0001:  GOTO   1F9
0002:  NOP
.................... #include <Ejercicio4_TP2.h>
.................... #include <16F1827.h>
.................... //////////// Standard Header file for the PIC16F1827 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1827
*
00E7:  MOVF   38,W
00E8:  ANDLW  07
00E9:  MOVWF  77
00EA:  RRF    38,W
00EB:  MOVWF  78
00EC:  RRF    78,F
00ED:  RRF    78,F
00EE:  MOVLW  1F
00EF:  ANDWF  78,F
00F0:  MOVF   78,W
00F1:  ADDWF  3A,W
00F2:  MOVWF  04
00F3:  MOVLW  00
00F4:  ADDWFC 3B,W
00F5:  MOVWF  05
00F6:  CLRF   78
00F7:  INCF   78,F
00F8:  INCF   77,F
00F9:  GOTO   0FB
00FA:  RLF    78,F
00FB:  DECFSZ 77,F
00FC:  GOTO   0FA
00FD:  MOVF   39,F
00FE:  BTFSC  03.2
00FF:  GOTO   103
0100:  MOVF   78,W
0101:  IORWF  00,F
0102:  GOTO   106
0103:  COMF   78,F
0104:  MOVF   78,W
0105:  ANDWF  00,F
0106:  RETURN
0107:  MOVF   38,W
0108:  ANDLW  07
0109:  MOVWF  77
010A:  RRF    38,W
010B:  MOVWF  78
010C:  RRF    78,F
010D:  RRF    78,F
010E:  MOVLW  1F
010F:  ANDWF  78,F
0110:  MOVF   78,W
0111:  ADDWF  39,W
0112:  MOVWF  04
0113:  MOVLW  00
0114:  ADDWFC 3A,W
0115:  MOVWF  05
0116:  MOVF   00,W
0117:  MOVWF  78
0118:  INCF   77,F
0119:  GOTO   11B
011A:  RRF    78,F
011B:  DECFSZ 77,F
011C:  GOTO   11A
011D:  MOVLW  01
011E:  ANDWF  78,F
011F:  MOVLP  00
0120:  GOTO   1AF (RETURN)
*
01B5:  CLRF   77
01B6:  CLRF   78
01B7:  MOVF   37,W
01B8:  BCF    03.0
01B9:  BTFSC  38.0
01BA:  ADDWF  77,F
01BB:  RRF    77,F
01BC:  RRF    78,F
01BD:  BTFSC  38.1
01BE:  ADDWF  77,F
01BF:  RRF    77,F
01C0:  RRF    78,F
01C1:  BTFSC  38.2
01C2:  ADDWF  77,F
01C3:  RRF    77,F
01C4:  RRF    78,F
01C5:  BTFSC  38.3
01C6:  ADDWF  77,F
01C7:  RRF    77,F
01C8:  RRF    78,F
01C9:  BTFSC  38.4
01CA:  ADDWF  77,F
01CB:  RRF    77,F
01CC:  RRF    78,F
01CD:  BTFSC  38.5
01CE:  ADDWF  77,F
01CF:  RRF    77,F
01D0:  RRF    78,F
01D1:  BTFSC  38.6
01D2:  ADDWF  77,F
01D3:  RRF    77,F
01D4:  RRF    78,F
01D5:  BTFSC  38.7
01D6:  ADDWF  77,F
01D7:  RRF    77,F
01D8:  RRF    78,F
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(clock=20000000)
*
003B:  MOVLW  20
003C:  MOVWF  05
003D:  MOVLW  1A
003E:  MOVWF  04
003F:  MOVF   00,W
0040:  BTFSC  03.2
0041:  GOTO   04F
0042:  MOVLW  06
0043:  MOVWF  78
0044:  CLRF   77
0045:  DECFSZ 77,F
0046:  GOTO   045
0047:  DECFSZ 78,F
0048:  GOTO   044
0049:  MOVLW  7B
004A:  MOVWF  77
004B:  DECFSZ 77,F
004C:  GOTO   04B
004D:  DECFSZ 00,F
004E:  GOTO   042
004F:  RETURN
.................... 
.................... 
.................... 
.................... #fuses INTRC_IO   // Oscilador interno con pines RA6 y RA7 como GPIO
.................... #fuses NOMCLR     // Desactivo el MCLR
.................... #fuses NOWDT      // Desactivo el watchdog
.................... 
.................... /*****************************************************************************
....................  * LCD
....................  ****************************************************************************/
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
006B:  MOVLW  0F
006C:  MOVLB  01
006D:  ANDWF  0D,W
006E:  IORLW  F0
006F:  MOVWF  0D
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0070:  MOVLB  00
0071:  BSF    0D.2
....................    delay_cycles(1);
0072:  NOP
....................    lcd_output_enable(1);
0073:  BSF    0D.0
....................    delay_cycles(1);
0074:  NOP
....................    high = lcd_read_nibble();
0075:  CALL   05F
0076:  MOVF   78,W
0077:  MOVWF  3E
....................       
....................    lcd_output_enable(0);
0078:  BCF    0D.0
....................    delay_cycles(1);
0079:  NOP
....................    lcd_output_enable(1);
007A:  BSF    0D.0
....................    delay_us(1);
007B:  GOTO   07C
007C:  GOTO   07D
007D:  NOP
....................    low = lcd_read_nibble();
007E:  CALL   05F
007F:  MOVF   78,W
0080:  MOVWF  3D
....................       
....................    lcd_output_enable(0);
0081:  BCF    0D.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0082:  MOVLW  0F
0083:  MOVLB  01
0084:  ANDWF  0D,W
0085:  MOVWF  0D
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0086:  MOVLB  00
0087:  SWAPF  3E,W
0088:  MOVWF  77
0089:  MOVLW  F0
008A:  ANDWF  77,F
008B:  MOVF   77,W
008C:  IORWF  3D,W
008D:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
005F:  MOVF   0D,W
0060:  MOVWF  77
0061:  SWAPF  0D,W
0062:  ANDLW  0F
0063:  MOVWF  78
....................   #endif
0064:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0050:  SWAPF  3E,W
0051:  ANDLW  F0
0052:  MOVWF  77
0053:  MOVLW  0F
0054:  ANDWF  0D,W
0055:  IORWF  77,W
0056:  MOVWF  0D
....................   #endif
....................       
....................    delay_cycles(1);
0057:  NOP
....................    lcd_output_enable(1);
0058:  BSF    0D.0
....................    delay_us(2);
0059:  MOVLW  03
005A:  MOVWF  77
005B:  DECFSZ 77,F
005C:  GOTO   05B
....................    lcd_output_enable(0);
005D:  BCF    0D.0
005E:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0065:  MOVLB  01
0066:  BCF    0D.0
....................    lcd_rs_tris();
0067:  BCF    0D.1
....................    lcd_rw_tris();
0068:  BCF    0D.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0069:  MOVLB  00
006A:  BCF    0D.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
008E:  MOVF   78,W
008F:  MOVWF  3D
0090:  BTFSC  3D.7
0091:  GOTO   06B
....................    lcd_output_rs(address);
0092:  BTFSS  3B.0
0093:  BCF    0D.1
0094:  BTFSC  3B.0
0095:  BSF    0D.1
....................    delay_cycles(1);
0096:  NOP
....................    lcd_output_rw(0);
0097:  BCF    0D.2
....................    delay_cycles(1);
0098:  NOP
....................    lcd_output_enable(0);
0099:  BCF    0D.0
....................    lcd_send_nibble(n >> 4);
009A:  SWAPF  3C,W
009B:  MOVWF  3D
009C:  MOVLW  0F
009D:  ANDWF  3D,F
009E:  MOVF   3D,W
009F:  MOVWF  3E
00A0:  CALL   050
....................    lcd_send_nibble(n & 0xf);
00A1:  MOVF   3C,W
00A2:  ANDLW  0F
00A3:  MOVWF  3D
00A4:  MOVWF  3E
00A5:  CALL   050
00A6:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
00A7:  MOVLW  28
00A8:  MOVWF  36
00A9:  MOVLW  0C
00AA:  MOVWF  37
00AB:  MOVLW  01
00AC:  MOVWF  38
00AD:  MOVLW  06
00AE:  MOVWF  39
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00AF:  BCF    0D.0
....................    lcd_output_rs(0);
00B0:  BCF    0D.1
....................    lcd_output_rw(0);
00B1:  BCF    0D.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
00B2:  MOVLW  0F
00B3:  MOVLB  01
00B4:  ANDWF  0D,W
00B5:  MOVWF  0D
....................   #endif
....................    lcd_enable_tris();
00B6:  BCF    0D.0
....................    lcd_rs_tris();
00B7:  BCF    0D.1
....................    lcd_rw_tris();
00B8:  BCF    0D.2
....................  #endif
....................     
....................    delay_ms(15);
00B9:  MOVLW  0F
00BA:  MOVLB  00
00BB:  MOVWF  3A
00BC:  CALL   03B
....................    for(i=1;i<=3;++i)
00BD:  MOVLW  01
00BE:  MOVWF  35
00BF:  MOVF   35,W
00C0:  SUBLW  03
00C1:  BTFSS  03.0
00C2:  GOTO   0CB
....................    {
....................        lcd_send_nibble(3);
00C3:  MOVLW  03
00C4:  MOVWF  3E
00C5:  CALL   050
....................        delay_ms(5);
00C6:  MOVLW  05
00C7:  MOVWF  3A
00C8:  CALL   03B
00C9:  INCF   35,F
00CA:  GOTO   0BF
....................    }
....................    
....................    lcd_send_nibble(2);
00CB:  MOVLW  02
00CC:  MOVWF  3E
00CD:  CALL   050
....................    delay_ms(5);
00CE:  MOVLW  05
00CF:  MOVWF  3A
00D0:  CALL   03B
....................    for(i=0;i<=3;++i)
00D1:  CLRF   35
00D2:  MOVF   35,W
00D3:  SUBLW  03
00D4:  BTFSS  03.0
00D5:  GOTO   0E5
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00D6:  MOVLW  16
00D7:  ADDWF  35,W
00D8:  MOVWF  04
00D9:  MOVLW  20
00DA:  MOVWF  05
00DB:  BTFSC  03.0
00DC:  INCF   05,F
00DD:  MOVF   00,W
00DE:  MOVWF  3A
00DF:  CLRF   3B
00E0:  MOVF   3A,W
00E1:  MOVWF  3C
00E2:  CALL   065
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00E3:  INCF   35,F
00E4:  GOTO   0D2
00E5:  MOVLP  00
00E6:  GOTO   22C (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
0121:  DECFSZ 37,W
0122:  GOTO   124
0123:  GOTO   127
....................       address=LCD_LINE_TWO;
0124:  MOVLW  40
0125:  MOVWF  38
0126:  GOTO   128
....................    else
....................       address=0;
0127:  CLRF   38
....................      
....................    address+=x-1;
0128:  MOVLW  01
0129:  SUBWF  36,W
012A:  ADDWF  38,F
....................    lcd_send_byte(0,0x80|address);
012B:  MOVF   38,W
012C:  IORLW  80
012D:  MOVWF  39
012E:  CLRF   3B
012F:  MOVF   39,W
0130:  MOVWF  3C
0131:  CALL   065
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0132:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0133:  MOVF   35,W
0134:  XORLW  07
0135:  BTFSC  03.2
0136:  GOTO   141
0137:  XORLW  0B
0138:  BTFSC  03.2
0139:  GOTO   146
013A:  XORLW  06
013B:  BTFSC  03.2
013C:  GOTO   14E
013D:  XORLW  02
013E:  BTFSC  03.2
013F:  GOTO   154
0140:  GOTO   159
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0141:  MOVLW  01
0142:  MOVWF  36
0143:  MOVWF  37
0144:  CALL   121
0145:  GOTO   15E
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0146:  CLRF   3B
0147:  MOVLW  01
0148:  MOVWF  3C
0149:  CALL   065
....................                      delay_ms(2);
014A:  MOVLW  02
014B:  MOVWF  3A
014C:  CALL   03B
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
014D:  GOTO   15E
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
014E:  MOVLW  01
014F:  MOVWF  36
0150:  MOVLW  02
0151:  MOVWF  37
0152:  CALL   121
0153:  GOTO   15E
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0154:  CLRF   3B
0155:  MOVLW  10
0156:  MOVWF  3C
0157:  CALL   065
0158:  GOTO   15E
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0159:  MOVLW  01
015A:  MOVWF  3B
015B:  MOVF   35,W
015C:  MOVWF  3C
015D:  CALL   065
....................      #endif
....................    }
015E:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... #define LCD_ENABLE_PIN  PIN_A0
.................... #define LCD_RS_PIN      PIN_A1
.................... //#define LCD_RW_PIN      PIN_A2 // CONECTADO A GND SI NO LO USAMOS
.................... #define LCD_DATA4       PIN_A4
.................... #define LCD_DATA5       PIN_A5
.................... #define LCD_DATA6       PIN_A6
.................... #define LCD_DATA7       PIN_A7
.................... 
.................... 
.................... 
.................... /*****************************************************************************
....................  * Funciones de Inicializacion de Perifericos
....................  ****************************************************************************/
.................... 
.................... void Init_GPIO();
.................... 
.................... /*****************************************************************************
.................... * Estados
.................... ****************************************************************************/
.................... typedef enum {
....................    ESPERAR,     // Espero que se presione una tecla
....................    MOSTRAR      // Muestro la tecla en el LCD
.................... } eEstado;
.................... 
.................... eEstado estado_actual = ESPERAR;
.................... /*****************************************************************************
.................... * Variables globales
.................... ****************************************************************************/
.................... char tecla = 0 ; // tecla que se presiona
.................... int fila_pins[4] = {PIN_B4, PIN_B5, PIN_B6, PIN_B7};
.................... int col_pins[3] = {PIN_B0, PIN_B1, PIN_B2};
.................... 
.................... /*****************************************************************************
.................... * Teclado
.................... ****************************************************************************/
.................... 
.................... char teclado[4][3] = {{'1','2','3'},
....................                       {'4','5','6'},
....................                       {'7','8','9'},
....................                       {'*','0','#'}};
.................... 
.................... /*****************************************************************************
.................... * Funciones
.................... ****************************************************************************/
.................... char read_keypad(void);
.................... void maquina(void);
.................... 
.................... void main()
*
01F9:  BCF    20.0
01FA:  CLRF   21
01FB:  MOVLB  03
01FC:  CLRF   0C
01FD:  CLRF   0D
01FE:  MOVLB  02
01FF:  CLRF   12
0200:  CLRF   11
0201:  CLRF   14
0202:  CLRF   13
0203:  MOVLW  6C
0204:  MOVLB  00
0205:  MOVWF  22
0206:  MOVLW  6D
0207:  MOVWF  23
0208:  MOVLW  6E
0209:  MOVWF  24
020A:  MOVLW  6F
020B:  MOVWF  25
020C:  MOVLW  68
020D:  MOVWF  26
020E:  MOVLW  69
020F:  MOVWF  27
0210:  MOVLW  6A
0211:  MOVWF  28
0212:  MOVLW  31
0213:  MOVWF  29
0214:  MOVLW  32
0215:  MOVWF  2A
0216:  MOVLW  33
0217:  MOVWF  2B
0218:  MOVLW  34
0219:  MOVWF  2C
021A:  MOVLW  35
021B:  MOVWF  2D
021C:  MOVLW  36
021D:  MOVWF  2E
021E:  MOVLW  37
021F:  MOVWF  2F
0220:  MOVLW  38
0221:  MOVWF  30
0222:  MOVLW  39
0223:  MOVWF  31
0224:  MOVLW  2A
0225:  MOVWF  32
0226:  MOVLW  30
0227:  MOVWF  33
0228:  MOVLW  23
0229:  MOVWF  34
.................... {
.................... 
.................... Init_GPIO();
022A:  GOTO   003
.................... lcd_init();
022B:  GOTO   0A7
.................... 
....................    while(TRUE) {
....................    maquina();
022C:  GOTO   15F
022D:  GOTO   22C
....................    }
.................... 
.................... }
.................... 
022E:  SLEEP
.................... void Init_GPIO()
.................... {
.................... /* SETEAMOS LOS PINES PB0-PB7 COMO SALIDA */
....................    set_tris_b(0b00000111); //RB0-RB2 = entrada, columnas, RB4-RB7 = Filas, salidas
*
0003:  MOVLW  07
0004:  MOVLB  01
0005:  MOVWF  0D
....................    set_tris_a(0b00000000); // TODO COMO SALIDA EN ESTADO BAJO 
0006:  MOVLW  00
0007:  MOVWF  0C
....................    
....................    port_b_pullups(TRUE);
0008:  MOVLW  01
0009:  MOVLB  04
000A:  MOVWF  0D
000B:  MOVLB  01
000C:  BCF    15.7
....................    
....................    output_high(PIN_B4);
000D:  BCF    0D.4
000E:  MOVLB  02
000F:  BSF    0D.4
....................    output_high(PIN_B5);
0010:  MOVLB  01
0011:  BCF    0D.5
0012:  MOVLB  02
0013:  BSF    0D.5
....................    output_high(PIN_B6);
0014:  MOVLB  01
0015:  BCF    0D.6
0016:  MOVLB  02
0017:  BSF    0D.6
....................    output_high(PIN_B7);
0018:  MOVLB  01
0019:  BCF    0D.7
001A:  MOVLB  02
001B:  BSF    0D.7
....................    
....................    output_low(PIN_A1);
001C:  MOVLB  01
001D:  BCF    0C.1
001E:  MOVLB  02
001F:  BCF    0C.1
....................    output_low(PIN_A2);
0020:  MOVLB  01
0021:  BCF    0C.2
0022:  MOVLB  02
0023:  BCF    0C.2
....................    output_low(PIN_A0);
0024:  MOVLB  01
0025:  BCF    0C.0
0026:  MOVLB  02
0027:  BCF    0C.0
....................    output_low(PIN_A4);
0028:  MOVLB  01
0029:  BCF    0C.4
002A:  MOVLB  02
002B:  BCF    0C.4
....................    output_low(PIN_A5);
002C:  MOVLB  01
002D:  BCF    0C.5
002E:  MOVLB  02
002F:  BCF    0C.5
....................    output_low(PIN_A6);
0030:  MOVLB  01
0031:  BCF    0C.6
0032:  MOVLB  02
0033:  BCF    0C.6
....................    output_low(PIN_A7);
0034:  MOVLB  01
0035:  BCF    0C.7
0036:  MOVLB  02
0037:  BCF    0C.7
0038:  MOVLP  00
0039:  MOVLB  00
003A:  GOTO   22B (RETURN)
.................... }
.................... 
.................... char read_keypad(void) {
....................    int fila;
....................    int col;
....................    for(fila=0; fila<4; fila++) {
*
0169:  CLRF   35
016A:  MOVF   35,W
016B:  SUBLW  03
016C:  BTFSS  03.0
016D:  GOTO   1E8
....................          output_high(PIN_B4);
016E:  MOVLB  01
016F:  BCF    0D.4
0170:  MOVLB  02
0171:  BSF    0D.4
....................          output_high(PIN_B5);
0172:  MOVLB  01
0173:  BCF    0D.5
0174:  MOVLB  02
0175:  BSF    0D.5
....................          output_high(PIN_B6);
0176:  MOVLB  01
0177:  BCF    0D.6
0178:  MOVLB  02
0179:  BSF    0D.6
....................          output_high(PIN_B7);          // Todas filas en 1
017A:  MOVLB  01
017B:  BCF    0D.7
017C:  MOVLB  02
017D:  BSF    0D.7
....................          output_low(fila_pins[fila]);    // Activar una fila en 0
017E:  MOVLW  02
017F:  MOVLB  00
0180:  ADDWF  35,W
0181:  MOVWF  04
0182:  MOVLW  20
0183:  MOVWF  05
0184:  BTFSC  03.0
0185:  INCF   05,F
0186:  MOVF   00,W
0187:  MOVWF  37
0188:  MOVWF  38
0189:  CLRF   39
018A:  MOVLW  01
018B:  MOVWF  3B
018C:  CLRF   3A
018D:  CALL   0E7
018E:  MOVF   37,W
018F:  MOVWF  38
0190:  CLRF   39
0191:  CLRF   3B
0192:  MOVLW  80
0193:  MOVWF  3A
0194:  CALL   0E7
.................... 
....................       for(col=0; col<3; col++) {
0195:  CLRF   36
0196:  MOVF   36,W
0197:  SUBLW  02
0198:  BTFSS  03.0
0199:  GOTO   1E6
....................          if(!input(col_pins[col])) // si se presiono alguna tecla la col tmb 0
019A:  MOVLW  06
019B:  ADDWF  36,W
019C:  MOVWF  04
019D:  MOVLW  20
019E:  MOVWF  05
019F:  BTFSC  03.0
01A0:  INCF   05,F
01A1:  MOVF   00,W
01A2:  MOVWF  37
01A3:  MOVWF  38
01A4:  MOVLW  01
01A5:  MOVWF  39
01A6:  CLRF   3B
01A7:  MOVLW  80
01A8:  MOVWF  3A
01A9:  CALL   0E7
01AA:  MOVF   37,W
01AB:  MOVWF  38
01AC:  CLRF   3A
01AD:  CLRF   39
01AE:  GOTO   107
01AF:  BTFSC  78.0
01B0:  GOTO   1E4
....................             return teclado[fila][col];
01B1:  MOVF   35,W
01B2:  MOVWF  37
01B3:  MOVLW  03
01B4:  MOVWF  38
*
01D9:  MOVF   36,W
01DA:  ADDWF  78,W
01DB:  ADDLW  09
01DC:  MOVWF  04
01DD:  MOVLW  20
01DE:  MOVWF  05
01DF:  BTFSC  03.0
01E0:  INCF   05,F
01E1:  MOVF   00,W
01E2:  MOVWF  78
01E3:  GOTO   1EA
01E4:  INCF   36,F
01E5:  GOTO   196
....................       }
01E6:  INCF   35,F
01E7:  GOTO   16A
....................    }
....................    return 0; // nada presionado
01E8:  MOVLW  00
01E9:  MOVWF  78
.................... }
.................... 
.................... void maquina() {
....................    switch(estado_actual) {
*
015F:  MOVLW  00
0160:  BTFSC  20.0
0161:  MOVLW  01
0162:  XORLW  00
0163:  BTFSC  03.2
0164:  GOTO   169
0165:  XORLW  01
0166:  BTFSC  03.2
0167:  GOTO   1F0
0168:  GOTO   1F7
....................          case ESPERAR:
....................             tecla = read_keypad();       // leo teclado
*
01EA:  MOVF   78,W
01EB:  MOVWF  21
....................             if(tecla != 0) {             // si presionaron algo, no hay 0 en el teclado
01EC:  MOVF   21,F
01ED:  BTFSS  03.2
....................                estado_actual = MOSTRAR;
01EE:  BSF    20.0
....................             }
....................          break;
01EF:  GOTO   1F7
....................    
....................          case MOSTRAR:
....................             lcd_putc('\f'); // borrar LCD
01F0:  MOVLW  0C
01F1:  MOVWF  35
01F2:  CALL   133
....................             lcd_putc(tecla);  // mostrar tecla
01F3:  MOVF   21,W
01F4:  MOVWF  35
01F5:  CALL   133
....................             estado_actual = ESPERAR;     // volver a esperar
01F6:  BCF    20.0
....................          break;
....................    }
01F7:  MOVLP  00
01F8:  GOTO   22D (RETURN)
.................... }

Configuration Fuses:
   Word  1: 3F84   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1FFF   NOWRT PLL STVREN BORV19 NODEBUG NOLVP
