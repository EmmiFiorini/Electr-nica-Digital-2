CCS PCM C Compiler, Version 5.093, 4770               16-sep.-25 18:50

               Filename:   C:\Users\MPF\Desktop\Git\Electr-nica-Digital-2\Guia 2\Punto 4\Ejercicio4_TP2.lst

               ROM used:   554 words (14%)
                           Largest free fragment is 2048
               RAM used:   25 (7%) at main() level
                           47 (12%) worst case
               Stack used: 4 locations
               Stack size: 16

0000:  MOVLP  00
0001:  GOTO   1F4
0002:  NOP
.................... #include <Ejercicio4_TP2.h>
.................... #include <16F1827.h>
.................... //////////// Standard Header file for the PIC16F1827 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1827
*
00E2:  MOVF   38,W
00E3:  ANDLW  07
00E4:  MOVWF  77
00E5:  RRF    38,W
00E6:  MOVWF  78
00E7:  RRF    78,F
00E8:  RRF    78,F
00E9:  MOVLW  1F
00EA:  ANDWF  78,F
00EB:  MOVF   78,W
00EC:  ADDWF  3A,W
00ED:  MOVWF  04
00EE:  MOVLW  00
00EF:  ADDWFC 3B,W
00F0:  MOVWF  05
00F1:  CLRF   78
00F2:  INCF   78,F
00F3:  INCF   77,F
00F4:  GOTO   0F6
00F5:  RLF    78,F
00F6:  DECFSZ 77,F
00F7:  GOTO   0F5
00F8:  MOVF   39,F
00F9:  BTFSC  03.2
00FA:  GOTO   0FE
00FB:  MOVF   78,W
00FC:  IORWF  00,F
00FD:  GOTO   101
00FE:  COMF   78,F
00FF:  MOVF   78,W
0100:  ANDWF  00,F
0101:  RETURN
0102:  MOVF   38,W
0103:  ANDLW  07
0104:  MOVWF  77
0105:  RRF    38,W
0106:  MOVWF  78
0107:  RRF    78,F
0108:  RRF    78,F
0109:  MOVLW  1F
010A:  ANDWF  78,F
010B:  MOVF   78,W
010C:  ADDWF  39,W
010D:  MOVWF  04
010E:  MOVLW  00
010F:  ADDWFC 3A,W
0110:  MOVWF  05
0111:  MOVF   00,W
0112:  MOVWF  78
0113:  INCF   77,F
0114:  GOTO   116
0115:  RRF    78,F
0116:  DECFSZ 77,F
0117:  GOTO   115
0118:  MOVLW  01
0119:  ANDWF  78,F
011A:  MOVLP  00
011B:  GOTO   1AA (RETURN)
*
01B0:  CLRF   77
01B1:  CLRF   78
01B2:  MOVF   37,W
01B3:  BCF    03.0
01B4:  BTFSC  38.0
01B5:  ADDWF  77,F
01B6:  RRF    77,F
01B7:  RRF    78,F
01B8:  BTFSC  38.1
01B9:  ADDWF  77,F
01BA:  RRF    77,F
01BB:  RRF    78,F
01BC:  BTFSC  38.2
01BD:  ADDWF  77,F
01BE:  RRF    77,F
01BF:  RRF    78,F
01C0:  BTFSC  38.3
01C1:  ADDWF  77,F
01C2:  RRF    77,F
01C3:  RRF    78,F
01C4:  BTFSC  38.4
01C5:  ADDWF  77,F
01C6:  RRF    77,F
01C7:  RRF    78,F
01C8:  BTFSC  38.5
01C9:  ADDWF  77,F
01CA:  RRF    77,F
01CB:  RRF    78,F
01CC:  BTFSC  38.6
01CD:  ADDWF  77,F
01CE:  RRF    77,F
01CF:  RRF    78,F
01D0:  BTFSC  38.7
01D1:  ADDWF  77,F
01D2:  RRF    77,F
01D3:  RRF    78,F
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(clock=20000000)
*
0036:  MOVLW  20
0037:  MOVWF  05
0038:  MOVLW  1A
0039:  MOVWF  04
003A:  MOVF   00,W
003B:  BTFSC  03.2
003C:  GOTO   04A
003D:  MOVLW  06
003E:  MOVWF  78
003F:  CLRF   77
0040:  DECFSZ 77,F
0041:  GOTO   040
0042:  DECFSZ 78,F
0043:  GOTO   03F
0044:  MOVLW  7B
0045:  MOVWF  77
0046:  DECFSZ 77,F
0047:  GOTO   046
0048:  DECFSZ 00,F
0049:  GOTO   03D
004A:  RETURN
.................... 
.................... 
.................... 
.................... #fuses INTRC_IO   // Oscilador interno con pines RA6 y RA7 como GPIO
.................... #fuses NOMCLR     // Desactivo el MCLR
.................... #fuses NOWDT      // Desactivo el watchdog
.................... 
.................... /*****************************************************************************
....................  * LCD
....................  ****************************************************************************/
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
0066:  MOVLW  0F
0067:  MOVLB  01
0068:  ANDWF  0D,W
0069:  IORLW  F0
006A:  MOVWF  0D
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
006B:  MOVLB  00
006C:  BSF    0D.2
....................    delay_cycles(1);
006D:  NOP
....................    lcd_output_enable(1);
006E:  BSF    0D.0
....................    delay_cycles(1);
006F:  NOP
....................    high = lcd_read_nibble();
0070:  CALL   05A
0071:  MOVF   78,W
0072:  MOVWF  3E
....................       
....................    lcd_output_enable(0);
0073:  BCF    0D.0
....................    delay_cycles(1);
0074:  NOP
....................    lcd_output_enable(1);
0075:  BSF    0D.0
....................    delay_us(1);
0076:  GOTO   077
0077:  GOTO   078
0078:  NOP
....................    low = lcd_read_nibble();
0079:  CALL   05A
007A:  MOVF   78,W
007B:  MOVWF  3D
....................       
....................    lcd_output_enable(0);
007C:  BCF    0D.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
007D:  MOVLW  0F
007E:  MOVLB  01
007F:  ANDWF  0D,W
0080:  MOVWF  0D
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0081:  MOVLB  00
0082:  SWAPF  3E,W
0083:  MOVWF  77
0084:  MOVLW  F0
0085:  ANDWF  77,F
0086:  MOVF   77,W
0087:  IORWF  3D,W
0088:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
005A:  MOVF   0D,W
005B:  MOVWF  77
005C:  SWAPF  0D,W
005D:  ANDLW  0F
005E:  MOVWF  78
....................   #endif
005F:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
004B:  SWAPF  3E,W
004C:  ANDLW  F0
004D:  MOVWF  77
004E:  MOVLW  0F
004F:  ANDWF  0D,W
0050:  IORWF  77,W
0051:  MOVWF  0D
....................   #endif
....................       
....................    delay_cycles(1);
0052:  NOP
....................    lcd_output_enable(1);
0053:  BSF    0D.0
....................    delay_us(2);
0054:  MOVLW  03
0055:  MOVWF  77
0056:  DECFSZ 77,F
0057:  GOTO   056
....................    lcd_output_enable(0);
0058:  BCF    0D.0
0059:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0060:  MOVLB  01
0061:  BCF    0D.0
....................    lcd_rs_tris();
0062:  BCF    0D.1
....................    lcd_rw_tris();
0063:  BCF    0D.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
0064:  MOVLB  00
0065:  BCF    0D.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0089:  MOVF   78,W
008A:  MOVWF  3D
008B:  BTFSC  3D.7
008C:  GOTO   066
....................    lcd_output_rs(address);
008D:  BTFSS  3B.0
008E:  BCF    0D.1
008F:  BTFSC  3B.0
0090:  BSF    0D.1
....................    delay_cycles(1);
0091:  NOP
....................    lcd_output_rw(0);
0092:  BCF    0D.2
....................    delay_cycles(1);
0093:  NOP
....................    lcd_output_enable(0);
0094:  BCF    0D.0
....................    lcd_send_nibble(n >> 4);
0095:  SWAPF  3C,W
0096:  MOVWF  3D
0097:  MOVLW  0F
0098:  ANDWF  3D,F
0099:  MOVF   3D,W
009A:  MOVWF  3E
009B:  CALL   04B
....................    lcd_send_nibble(n & 0xf);
009C:  MOVF   3C,W
009D:  ANDLW  0F
009E:  MOVWF  3D
009F:  MOVWF  3E
00A0:  CALL   04B
00A1:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
00A2:  MOVLW  28
00A3:  MOVWF  36
00A4:  MOVLW  0C
00A5:  MOVWF  37
00A6:  MOVLW  01
00A7:  MOVWF  38
00A8:  MOVLW  06
00A9:  MOVWF  39
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00AA:  BCF    0D.0
....................    lcd_output_rs(0);
00AB:  BCF    0D.1
....................    lcd_output_rw(0);
00AC:  BCF    0D.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
00AD:  MOVLW  0F
00AE:  MOVLB  01
00AF:  ANDWF  0D,W
00B0:  MOVWF  0D
....................   #endif
....................    lcd_enable_tris();
00B1:  BCF    0D.0
....................    lcd_rs_tris();
00B2:  BCF    0D.1
....................    lcd_rw_tris();
00B3:  BCF    0D.2
....................  #endif
....................     
....................    delay_ms(15);
00B4:  MOVLW  0F
00B5:  MOVLB  00
00B6:  MOVWF  3A
00B7:  CALL   036
....................    for(i=1;i<=3;++i)
00B8:  MOVLW  01
00B9:  MOVWF  35
00BA:  MOVF   35,W
00BB:  SUBLW  03
00BC:  BTFSS  03.0
00BD:  GOTO   0C6
....................    {
....................        lcd_send_nibble(3);
00BE:  MOVLW  03
00BF:  MOVWF  3E
00C0:  CALL   04B
....................        delay_ms(5);
00C1:  MOVLW  05
00C2:  MOVWF  3A
00C3:  CALL   036
00C4:  INCF   35,F
00C5:  GOTO   0BA
....................    }
....................    
....................    lcd_send_nibble(2);
00C6:  MOVLW  02
00C7:  MOVWF  3E
00C8:  CALL   04B
....................    delay_ms(5);
00C9:  MOVLW  05
00CA:  MOVWF  3A
00CB:  CALL   036
....................    for(i=0;i<=3;++i)
00CC:  CLRF   35
00CD:  MOVF   35,W
00CE:  SUBLW  03
00CF:  BTFSS  03.0
00D0:  GOTO   0E0
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00D1:  MOVLW  16
00D2:  ADDWF  35,W
00D3:  MOVWF  04
00D4:  MOVLW  20
00D5:  MOVWF  05
00D6:  BTFSC  03.0
00D7:  INCF   05,F
00D8:  MOVF   00,W
00D9:  MOVWF  3A
00DA:  CLRF   3B
00DB:  MOVF   3A,W
00DC:  MOVWF  3C
00DD:  CALL   060
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00DE:  INCF   35,F
00DF:  GOTO   0CD
00E0:  MOVLP  00
00E1:  GOTO   227 (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
011C:  DECFSZ 37,W
011D:  GOTO   11F
011E:  GOTO   122
....................       address=LCD_LINE_TWO;
011F:  MOVLW  40
0120:  MOVWF  38
0121:  GOTO   123
....................    else
....................       address=0;
0122:  CLRF   38
....................      
....................    address+=x-1;
0123:  MOVLW  01
0124:  SUBWF  36,W
0125:  ADDWF  38,F
....................    lcd_send_byte(0,0x80|address);
0126:  MOVF   38,W
0127:  IORLW  80
0128:  MOVWF  39
0129:  CLRF   3B
012A:  MOVF   39,W
012B:  MOVWF  3C
012C:  CALL   060
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
012D:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
012E:  MOVF   35,W
012F:  XORLW  07
0130:  BTFSC  03.2
0131:  GOTO   13C
0132:  XORLW  0B
0133:  BTFSC  03.2
0134:  GOTO   141
0135:  XORLW  06
0136:  BTFSC  03.2
0137:  GOTO   149
0138:  XORLW  02
0139:  BTFSC  03.2
013A:  GOTO   14F
013B:  GOTO   154
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
013C:  MOVLW  01
013D:  MOVWF  36
013E:  MOVWF  37
013F:  CALL   11C
0140:  GOTO   159
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0141:  CLRF   3B
0142:  MOVLW  01
0143:  MOVWF  3C
0144:  CALL   060
....................                      delay_ms(2);
0145:  MOVLW  02
0146:  MOVWF  3A
0147:  CALL   036
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0148:  GOTO   159
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0149:  MOVLW  01
014A:  MOVWF  36
014B:  MOVLW  02
014C:  MOVWF  37
014D:  CALL   11C
014E:  GOTO   159
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
014F:  CLRF   3B
0150:  MOVLW  10
0151:  MOVWF  3C
0152:  CALL   060
0153:  GOTO   159
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
0154:  MOVLW  01
0155:  MOVWF  3B
0156:  MOVF   35,W
0157:  MOVWF  3C
0158:  CALL   060
....................      #endif
....................    }
0159:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... #define LCD_ENABLE_PIN  PIN_A0
.................... #define LCD_RS_PIN      PIN_A1
.................... //#define LCD_RW_PIN      PIN_A2 // CONECTADO A GND SI NO LO USAMOS
.................... #define LCD_DATA4       PIN_A4
.................... #define LCD_DATA5       PIN_A5
.................... #define LCD_DATA6       PIN_A6
.................... #define LCD_DATA7       PIN_A7
.................... 
.................... 
.................... 
.................... /*****************************************************************************
....................  * Funciones de Inicializacion de Perifericos
....................  ****************************************************************************/
.................... 
.................... void Init_GPIO();
.................... 
.................... /*****************************************************************************
.................... * Estados
.................... ****************************************************************************/
.................... typedef enum {
....................    ESPERAR,     // Espero que se presione una tecla
....................    MOSTRAR      // Muestro la tecla en el LCD
.................... } eEstado;
.................... 
.................... eEstado estado_actual = ESPERAR;
.................... /*****************************************************************************
.................... * Variables globales
.................... ****************************************************************************/
.................... char tecla = 0 ; // tecla que se presiona
.................... int fila_pins[4] = {PIN_B4, PIN_B5, PIN_B6, PIN_B7};
.................... int col_pins[3] = {PIN_B0, PIN_B1, PIN_B2};
.................... 
.................... /*****************************************************************************
.................... * Teclado
.................... ****************************************************************************/
.................... 
.................... char teclado[4][3] = {{'1','2','3'},
....................                       {'4','5','6'},
....................                       {'7','8','9'},
....................                       {'*','0','#'}};
.................... 
.................... /*****************************************************************************
.................... * Funciones
.................... ****************************************************************************/
.................... char read_keypad(void);
.................... void maquina(void);
.................... 
.................... void main()
*
01F4:  BCF    20.0
01F5:  CLRF   21
01F6:  MOVLB  03
01F7:  CLRF   0C
01F8:  CLRF   0D
01F9:  MOVLB  02
01FA:  CLRF   12
01FB:  CLRF   11
01FC:  CLRF   14
01FD:  CLRF   13
01FE:  MOVLW  6C
01FF:  MOVLB  00
0200:  MOVWF  22
0201:  MOVLW  6D
0202:  MOVWF  23
0203:  MOVLW  6E
0204:  MOVWF  24
0205:  MOVLW  6F
0206:  MOVWF  25
0207:  MOVLW  68
0208:  MOVWF  26
0209:  MOVLW  69
020A:  MOVWF  27
020B:  MOVLW  6A
020C:  MOVWF  28
020D:  MOVLW  31
020E:  MOVWF  29
020F:  MOVLW  32
0210:  MOVWF  2A
0211:  MOVLW  33
0212:  MOVWF  2B
0213:  MOVLW  34
0214:  MOVWF  2C
0215:  MOVLW  35
0216:  MOVWF  2D
0217:  MOVLW  36
0218:  MOVWF  2E
0219:  MOVLW  37
021A:  MOVWF  2F
021B:  MOVLW  38
021C:  MOVWF  30
021D:  MOVLW  39
021E:  MOVWF  31
021F:  MOVLW  2A
0220:  MOVWF  32
0221:  MOVLW  30
0222:  MOVWF  33
0223:  MOVLW  23
0224:  MOVWF  34
.................... {
.................... 
.................... Init_GPIO();
0225:  GOTO   003
.................... lcd_init();
0226:  GOTO   0A2
.................... 
....................    while(TRUE) {
....................    maquina();
0227:  GOTO   15A
0228:  GOTO   227
....................    }
.................... 
.................... }
.................... 
0229:  SLEEP
.................... void Init_GPIO()
.................... {
.................... /* SETEAMOS LOS PINES PB0-PB7 COMO SALIDA */
....................    set_tris_b(0b00000111); //RB0-RB2 = entrada, columnas, RB4-RB7 = Filas, salidas
*
0003:  MOVLW  07
0004:  MOVLB  01
0005:  MOVWF  0D
....................    set_tris_a(0b00000000); // TODO COMO SALIDA EN ESTADO BAJO 
0006:  MOVLW  00
0007:  MOVWF  0C
.................... 
....................    output_low(PIN_B4);
0008:  BCF    0D.4
0009:  MOVLB  02
000A:  BCF    0D.4
....................    output_low(PIN_B5);
000B:  MOVLB  01
000C:  BCF    0D.5
000D:  MOVLB  02
000E:  BCF    0D.5
....................    output_low(PIN_B6);
000F:  MOVLB  01
0010:  BCF    0D.6
0011:  MOVLB  02
0012:  BCF    0D.6
....................    output_low(PIN_B7);
0013:  MOVLB  01
0014:  BCF    0D.7
0015:  MOVLB  02
0016:  BCF    0D.7
....................       
....................    output_low(PIN_A1);
0017:  MOVLB  01
0018:  BCF    0C.1
0019:  MOVLB  02
001A:  BCF    0C.1
....................    output_low(PIN_A2);
001B:  MOVLB  01
001C:  BCF    0C.2
001D:  MOVLB  02
001E:  BCF    0C.2
....................    output_low(PIN_A0);
001F:  MOVLB  01
0020:  BCF    0C.0
0021:  MOVLB  02
0022:  BCF    0C.0
....................    output_low(PIN_A4);
0023:  MOVLB  01
0024:  BCF    0C.4
0025:  MOVLB  02
0026:  BCF    0C.4
....................    output_low(PIN_A5);
0027:  MOVLB  01
0028:  BCF    0C.5
0029:  MOVLB  02
002A:  BCF    0C.5
....................    output_low(PIN_A6);
002B:  MOVLB  01
002C:  BCF    0C.6
002D:  MOVLB  02
002E:  BCF    0C.6
....................    output_low(PIN_A7);
002F:  MOVLB  01
0030:  BCF    0C.7
0031:  MOVLB  02
0032:  BCF    0C.7
0033:  MOVLP  00
0034:  MOVLB  00
0035:  GOTO   226 (RETURN)
.................... }
.................... 
.................... char read_keypad(void) {
....................    int fila;
....................    int col;
....................    for(fila=0; fila<4; fila++) {
*
0164:  CLRF   35
0165:  MOVF   35,W
0166:  SUBLW  03
0167:  BTFSS  03.0
0168:  GOTO   1E3
....................          output_high(PIN_B4);
0169:  MOVLB  01
016A:  BCF    0D.4
016B:  MOVLB  02
016C:  BSF    0D.4
....................          output_high(PIN_B5);
016D:  MOVLB  01
016E:  BCF    0D.5
016F:  MOVLB  02
0170:  BSF    0D.5
....................          output_high(PIN_B6);
0171:  MOVLB  01
0172:  BCF    0D.6
0173:  MOVLB  02
0174:  BSF    0D.6
....................          output_high(PIN_B7);          // Todas filas en 1
0175:  MOVLB  01
0176:  BCF    0D.7
0177:  MOVLB  02
0178:  BSF    0D.7
....................          output_low(fila_pins[fila]);    // Activar una fila en 0
0179:  MOVLW  02
017A:  MOVLB  00
017B:  ADDWF  35,W
017C:  MOVWF  04
017D:  MOVLW  20
017E:  MOVWF  05
017F:  BTFSC  03.0
0180:  INCF   05,F
0181:  MOVF   00,W
0182:  MOVWF  37
0183:  MOVWF  38
0184:  CLRF   39
0185:  MOVLW  01
0186:  MOVWF  3B
0187:  CLRF   3A
0188:  CALL   0E2
0189:  MOVF   37,W
018A:  MOVWF  38
018B:  CLRF   39
018C:  CLRF   3B
018D:  MOVLW  80
018E:  MOVWF  3A
018F:  CALL   0E2
.................... 
....................       for(col=0; col<3; col++) {
0190:  CLRF   36
0191:  MOVF   36,W
0192:  SUBLW  02
0193:  BTFSS  03.0
0194:  GOTO   1E1
....................          if(!input(col_pins[col])) // si se presiono alguna tecla la col tmb 0
0195:  MOVLW  06
0196:  ADDWF  36,W
0197:  MOVWF  04
0198:  MOVLW  20
0199:  MOVWF  05
019A:  BTFSC  03.0
019B:  INCF   05,F
019C:  MOVF   00,W
019D:  MOVWF  37
019E:  MOVWF  38
019F:  MOVLW  01
01A0:  MOVWF  39
01A1:  CLRF   3B
01A2:  MOVLW  80
01A3:  MOVWF  3A
01A4:  CALL   0E2
01A5:  MOVF   37,W
01A6:  MOVWF  38
01A7:  CLRF   3A
01A8:  CLRF   39
01A9:  GOTO   102
01AA:  BTFSC  78.0
01AB:  GOTO   1DF
....................             return teclado[fila][col];
01AC:  MOVF   35,W
01AD:  MOVWF  37
01AE:  MOVLW  03
01AF:  MOVWF  38
*
01D4:  MOVF   36,W
01D5:  ADDWF  78,W
01D6:  ADDLW  09
01D7:  MOVWF  04
01D8:  MOVLW  20
01D9:  MOVWF  05
01DA:  BTFSC  03.0
01DB:  INCF   05,F
01DC:  MOVF   00,W
01DD:  MOVWF  78
01DE:  GOTO   1E5
01DF:  INCF   36,F
01E0:  GOTO   191
....................       }
01E1:  INCF   35,F
01E2:  GOTO   165
....................    }
....................    return 0; // nada presionado
01E3:  MOVLW  00
01E4:  MOVWF  78
.................... }
.................... 
.................... void maquina() {
....................    switch(estado_actual) {
*
015A:  MOVLW  00
015B:  BTFSC  20.0
015C:  MOVLW  01
015D:  XORLW  00
015E:  BTFSC  03.2
015F:  GOTO   164
0160:  XORLW  01
0161:  BTFSC  03.2
0162:  GOTO   1EB
0163:  GOTO   1F2
....................          case ESPERAR:
....................             tecla = read_keypad();       // leo teclado
*
01E5:  MOVF   78,W
01E6:  MOVWF  21
....................             if(tecla != 0) {             // si presionaron algo, no hay 0 en el teclado
01E7:  MOVF   21,F
01E8:  BTFSS  03.2
....................                estado_actual = MOSTRAR;
01E9:  BSF    20.0
....................             }
....................          break;
01EA:  GOTO   1F2
....................    
....................          case MOSTRAR:
....................             lcd_putc('\f'); // borrar LCD
01EB:  MOVLW  0C
01EC:  MOVWF  35
01ED:  CALL   12E
....................             lcd_putc(tecla);  // mostrar tecla
01EE:  MOVF   21,W
01EF:  MOVWF  35
01F0:  CALL   12E
....................             estado_actual = ESPERAR;     // volver a esperar
01F1:  BCF    20.0
....................          break;
....................    }
01F2:  MOVLP  00
01F3:  GOTO   228 (RETURN)
.................... }

Configuration Fuses:
   Word  1: 3F84   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1FFF   NOWRT PLL STVREN BORV19 NODEBUG NOLVP
