CCS PCM C Compiler, Version 5.093, 4770               18-sep.-25 12:54

               Filename:   C:\Users\MPF\Desktop\Git\Electr-nica-Digital-2\Guia 2\Punto 4\Ejercicio4_TP2.lst

               ROM used:   639 words (16%)
                           Largest free fragment is 2048
               RAM used:   27 (7%) at main() level
                           51 (13%) worst case
               Stack used: 4 locations
               Stack size: 16

0000:  MOVLP  00
0001:  GOTO   247
0002:  NOP
.................... #include <Ejercicio4_TP2.h>
.................... #include <16F1827.h>
.................... //////////// Standard Header file for the PIC16F1827 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1827
0003:  DATA C8,37
0004:  DATA EC,30
0005:  DATA 00,00
*
00EA:  MOVF   3A,W
00EB:  ANDLW  07
00EC:  MOVWF  77
00ED:  RRF    3A,W
00EE:  MOVWF  78
00EF:  RRF    78,F
00F0:  RRF    78,F
00F1:  MOVLW  1F
00F2:  ANDWF  78,F
00F3:  MOVF   78,W
00F4:  ADDWF  3C,W
00F5:  MOVWF  04
00F6:  MOVLW  00
00F7:  ADDWFC 3D,W
00F8:  MOVWF  05
00F9:  CLRF   78
00FA:  INCF   78,F
00FB:  INCF   77,F
00FC:  GOTO   0FE
00FD:  RLF    78,F
00FE:  DECFSZ 77,F
00FF:  GOTO   0FD
0100:  MOVF   3B,F
0101:  BTFSC  03.2
0102:  GOTO   106
0103:  MOVF   78,W
0104:  IORWF  00,F
0105:  GOTO   109
0106:  COMF   78,F
0107:  MOVF   78,W
0108:  ANDWF  00,F
0109:  RETURN
010A:  MOVF   3A,W
010B:  ANDLW  07
010C:  MOVWF  77
010D:  RRF    3A,W
010E:  MOVWF  78
010F:  RRF    78,F
0110:  RRF    78,F
0111:  MOVLW  1F
0112:  ANDWF  78,F
0113:  MOVF   78,W
0114:  ADDWF  3B,W
0115:  MOVWF  04
0116:  MOVLW  00
0117:  ADDWFC 3C,W
0118:  MOVWF  05
0119:  MOVF   00,W
011A:  MOVWF  78
011B:  INCF   77,F
011C:  GOTO   11E
011D:  RRF    78,F
011E:  DECFSZ 77,F
011F:  GOTO   11D
0120:  MOVLW  01
0121:  ANDWF  78,F
0122:  MOVLP  00
0123:  GOTO   1B2 (RETURN)
*
01B8:  CLRF   77
01B9:  CLRF   78
01BA:  MOVF   39,W
01BB:  BCF    03.0
01BC:  BTFSC  3A.0
01BD:  ADDWF  77,F
01BE:  RRF    77,F
01BF:  RRF    78,F
01C0:  BTFSC  3A.1
01C1:  ADDWF  77,F
01C2:  RRF    77,F
01C3:  RRF    78,F
01C4:  BTFSC  3A.2
01C5:  ADDWF  77,F
01C6:  RRF    77,F
01C7:  RRF    78,F
01C8:  BTFSC  3A.3
01C9:  ADDWF  77,F
01CA:  RRF    77,F
01CB:  RRF    78,F
01CC:  BTFSC  3A.4
01CD:  ADDWF  77,F
01CE:  RRF    77,F
01CF:  RRF    78,F
01D0:  BTFSC  3A.5
01D1:  ADDWF  77,F
01D2:  RRF    77,F
01D3:  RRF    78,F
01D4:  BTFSC  3A.6
01D5:  ADDWF  77,F
01D6:  RRF    77,F
01D7:  RRF    78,F
01D8:  BTFSC  3A.7
01D9:  ADDWF  77,F
01DA:  RRF    77,F
01DB:  RRF    78,F
*
01FB:  MOVF   0B,W
01FC:  BCF    0B.7
01FD:  BSF    15.7
01FE:  BSF    15.0
01FF:  NOP
0200:  NOP
0201:  BTFSC  09.7
0202:  BSF    0B.7
0203:  MOVF   13,W
0204:  ANDLW  7F
0205:  BTFSC  03.2
0206:  GOTO   240
0207:  MOVLB  00
0208:  MOVWF  37
0209:  MOVLB  03
020A:  MOVF   11,W
020B:  MOVLB  00
020C:  MOVWF  38
020D:  MOVLB  03
020E:  MOVF   12,W
020F:  MOVLB  00
0210:  MOVWF  39
0211:  MOVF   37,W
0212:  MOVWF  3A
0213:  CALL   136
0214:  MOVF   38,W
0215:  MOVLB  03
0216:  MOVWF  11
0217:  MOVLB  00
0218:  MOVF   39,W
0219:  MOVLB  03
021A:  MOVWF  12
021B:  MOVF   0B,W
021C:  BCF    0B.7
021D:  BSF    15.7
021E:  BSF    15.0
021F:  NOP
0220:  NOP
0221:  BTFSC  09.7
0222:  BSF    0B.7
0223:  RLF    13,W
0224:  RLF    14,W
0225:  ANDLW  7F
0226:  BTFSC  03.2
0227:  GOTO   240
0228:  MOVLB  00
0229:  MOVWF  37
022A:  MOVLB  03
022B:  MOVF   11,W
022C:  MOVLB  00
022D:  MOVWF  38
022E:  MOVLB  03
022F:  MOVF   12,W
0230:  MOVLB  00
0231:  MOVWF  39
0232:  MOVF   37,W
0233:  MOVWF  3A
0234:  CALL   136
0235:  MOVF   38,W
0236:  MOVLB  03
0237:  MOVWF  11
0238:  MOVLB  00
0239:  MOVF   39,W
023A:  MOVLB  03
023B:  MOVWF  12
023C:  INCF   11,F
023D:  BTFSC  03.2
023E:  INCF   12,F
023F:  GOTO   1FB
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(clock=20000000)
*
003E:  MOVLW  20
003F:  MOVWF  05
0040:  MOVLW  1C
0041:  MOVWF  04
0042:  MOVF   00,W
0043:  BTFSC  03.2
0044:  GOTO   052
0045:  MOVLW  06
0046:  MOVWF  78
0047:  CLRF   77
0048:  DECFSZ 77,F
0049:  GOTO   048
004A:  DECFSZ 78,F
004B:  GOTO   047
004C:  MOVLW  7B
004D:  MOVWF  77
004E:  DECFSZ 77,F
004F:  GOTO   04E
0050:  DECFSZ 00,F
0051:  GOTO   045
0052:  RETURN
.................... 
.................... 
.................... 
.................... #fuses INTRC_IO   // Oscilador interno con pines RA6 y RA7 como GPIO
.................... #fuses NOMCLR     // Desactivo el MCLR
.................... #fuses NOWDT      // Desactivo el watchdog
.................... 
.................... /*****************************************************************************
....................  * LCD
....................  ****************************************************************************/
.................... #include <lcd.c>
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////                             LCD.C                                     ////
.................... ////                 Driver for common LCD modules                         ////
.................... ////                                                                       ////
.................... ////  lcd_init()   Must be called before any other function.               ////
.................... ////                                                                       ////
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         ////
.................... ////                 \a  Set cursor position to upper left                 ////
.................... ////                 \f  Clear display, set cursor to upper left           ////
.................... ////                 \n  Go to start of second line                        ////
.................... ////                 \b  Move back one position                            ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     ////
.................... ////              will erase all remanining characters on the current      ////
.................... ////              line, and move the cursor to the beginning of the next   ////
.................... ////              line.                                                    ////
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     ////
.................... ////              will move the cursor to the start of the current         ////
.................... ////              line.                                                    ////
.................... ////                                                                       ////
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        ////
.................... ////                                                                       ////
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             ////
.................... ////                                                                       ////
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         ////
.................... ////              (on=FALSE).                                              ////
.................... ////                                                                       ////
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   ////
.................... ////                                                                       ////
.................... ////                                                                       ////
.................... ////  CONFIGURATION                                                        ////
.................... ////  The LCD can be configured in one of two ways: a.) port access or     ////
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     ////
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     ////
.................... ////  connected to sequential pins on the GPIO.  Pin access                ////
.................... ////  has no requirements, all 7 bits of the control interface can         ////
.................... ////  can be connected to any GPIO using several ports.                    ////
.................... ////                                                                       ////
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     ////
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    ////
.................... ////  of this file to configure the pin order.  If you are using a         ////
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  ////
.................... ////  be defined.                                                          ////
.................... ////                                                                       ////
.................... ////  Example of port access:                                              ////
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         ////
.................... ////                                                                       ////
.................... ////  To use pin access, the following pins must be defined:               ////
.................... ////     LCD_ENABLE_PIN                                                    ////
.................... ////     LCD_RS_PIN                                                        ////
.................... ////     LCD_RW_PIN                                                        ////
.................... ////     LCD_DATA4                                                         ////
.................... ////     LCD_DATA5                                                         ////
.................... ////     LCD_DATA6                                                         ////
.................... ////     LCD_DATA7                                                         ////
.................... ////                                                                       ////
.................... ////  Example of pin access:                                               ////
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    ////
.................... ////     #define LCD_RS_PIN      PIN_E1                                    ////
.................... ////     #define LCD_RW_PIN      PIN_E2                                    ////
.................... ////     #define LCD_DATA4       PIN_D4                                    ////
.................... ////     #define LCD_DATA5       PIN_D5                                    ////
.................... ////     #define LCD_DATA6       PIN_D6                                    ////
.................... ////     #define LCD_DATA7       PIN_D7                                    ////
.................... ////                                                                       ////
.................... ///////////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... 
.................... #ifndef __LCD_C__
.................... #define __LCD_C__
.................... 
.................... // define the pinout.
.................... // only required if port access is being used.
.................... typedef struct  
.................... {                            // This structure is overlayed
....................    int1 enable;           // on to an I/O port to gain
....................    int1 rs;               // access to the LCD pins.
....................    int1 rw;               // The bits are allocated from
....................    int1 unused;           // low order up.  ENABLE will
....................    unsigned int     data : 4;         // be LSB pin of that port.
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT.
....................    unsigned int    reserved: 8;
....................   #endif
.................... } LCD_PIN_MAP;
.................... 
.................... // this is to improve compatability with previous LCD drivers that accepted
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B.
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE))
....................  #define LCD_DATA_PORT getenv("SFR:PORTB")
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    // these definitions only need to be modified for baseline PICs.
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions.
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0};
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF};
.................... #endif
.................... 
.................... ////////////////////// END CONFIGURATION ///////////////////////////////////
.................... 
.................... #ifndef LCD_ENABLE_PIN
....................    #define lcd_output_enable(x) lcdlat.enable=x
....................    #define lcd_enable_tris()   lcdtris.enable=0
.................... #else
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x)
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RS_PIN
....................    #define lcd_output_rs(x) lcdlat.rs=x
....................    #define lcd_rs_tris()   lcdtris.rs=0
.................... #else
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x)
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN)
.................... #endif
.................... 
.................... #ifndef LCD_RW_PIN
....................    #define lcd_output_rw(x) lcdlat.rw=x
....................    #define lcd_rw_tris()   lcdtris.rw=0
.................... #else
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x)
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN)
.................... #endif
.................... 
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4,
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver
.................... // compatible with any code written for the original library
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7))
....................    #define  LCD_DATA4    LCD_DATA0
....................    #define  LCD_DATA5    LCD_DATA1
....................    #define  LCD_DATA6    LCD_DATA2
....................    #define  LCD_DATA7    LCD_DATA3
.................... #endif
.................... 
.................... #ifndef LCD_DATA4
.................... #ifndef LCD_DATA_PORT
....................    #if defined(__PCB__)
....................       #define LCD_DATA_PORT      0x06     //portb
....................       #define set_tris_lcd(x)   set_tris_b(x)
....................    #else
....................      #if defined(PIN_D0)
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd
....................      #else
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb
....................      #endif
....................    #endif   
.................... #endif
.................... 
.................... #if defined(__PCB__)
....................    LCD_PIN_MAP lcd, lcdlat;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
.................... #elif defined(__PCM__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT
....................    #byte lcdtris = LCD_DATA_PORT+0x80
.................... #elif defined(__PCH__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #byte lcd = LCD_DATA_PORT
....................    #byte lcdlat = LCD_DATA_PORT+9
....................    #byte lcdtris = LCD_DATA_PORT+0x12
.................... #elif defined(__PCD__)
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris;
....................    #word lcd = LCD_DATA_PORT
....................    #word lcdlat = LCD_DATA_PORT+2
....................    #word lcdtris = LCD_DATA_PORT-0x02
.................... #endif
.................... #endif   //LCD_DATA4 not defined
.................... 
.................... #ifndef LCD_TYPE
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines
.................... #endif
.................... 
.................... #ifndef LCD_LINE_TWO
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line
.................... #endif
.................... 
.................... #ifndef LCD_LINE_LENGTH
....................    #define LCD_LINE_LENGTH 20
.................... #endif
.................... 
.................... unsigned int8 lcd_read_nibble(void);
.................... 
.................... unsigned int8 lcd_read_byte(void)
.................... {
....................    unsigned int8 low,high;
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_INPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_float(LCD_DATA4);
....................    output_float(LCD_DATA5);
....................    output_float(LCD_DATA6);
....................    output_float(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0xF;
*
006E:  MOVLW  0F
006F:  MOVLB  01
0070:  ANDWF  0D,W
0071:  IORLW  F0
0072:  MOVWF  0D
....................   #endif
....................  #endif
....................         
....................    lcd_output_rw(1);
0073:  MOVLB  00
0074:  BSF    0D.2
....................    delay_cycles(1);
0075:  NOP
....................    lcd_output_enable(1);
0076:  BSF    0D.0
....................    delay_cycles(1);
0077:  NOP
....................    high = lcd_read_nibble();
0078:  CALL   062
0079:  MOVF   78,W
007A:  MOVWF  42
....................       
....................    lcd_output_enable(0);
007B:  BCF    0D.0
....................    delay_cycles(1);
007C:  NOP
....................    lcd_output_enable(1);
007D:  BSF    0D.0
....................    delay_us(1);
007E:  GOTO   07F
007F:  GOTO   080
0080:  NOP
....................    low = lcd_read_nibble();
0081:  CALL   062
0082:  MOVF   78,W
0083:  MOVWF  41
....................       
....................    lcd_output_enable(0);
0084:  BCF    0D.0
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
0085:  MOVLW  0F
0086:  MOVLB  01
0087:  ANDWF  0D,W
0088:  MOVWF  0D
....................   #endif
....................  #endif
.................... 
....................    return( (high<<4) | low);
0089:  MOVLB  00
008A:  SWAPF  42,W
008B:  MOVWF  77
008C:  MOVLW  F0
008D:  ANDWF  77,F
008E:  MOVF   77,W
008F:  IORWF  41,W
0090:  MOVWF  78
.................... }
.................... 
.................... unsigned int8 lcd_read_nibble(void)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    unsigned int8 n = 0x00;
.................... 
....................    /* Read the data port */
....................    n |= input(LCD_DATA4);
....................    n |= input(LCD_DATA5) << 1;
....................    n |= input(LCD_DATA6) << 2;
....................    n |= input(LCD_DATA7) << 3;
....................    
....................    return(n);
....................   #else
....................    return(lcd.data);
*
0062:  MOVF   0D,W
0063:  MOVWF  77
0064:  SWAPF  0D,W
0065:  ANDLW  0F
0066:  MOVWF  78
....................   #endif
0067:  RETURN
.................... }
.................... 
.................... void lcd_send_nibble(unsigned int8 n)
.................... {
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    /* Write to the data port */
....................    output_bit(LCD_DATA4, bit_test(n, 0));
....................    output_bit(LCD_DATA5, bit_test(n, 1));
....................    output_bit(LCD_DATA6, bit_test(n, 2));
....................    output_bit(LCD_DATA7, bit_test(n, 3));
....................   #else      
....................    lcdlat.data = n;
*
0053:  SWAPF  42,W
0054:  ANDLW  F0
0055:  MOVWF  77
0056:  MOVLW  0F
0057:  ANDWF  0D,W
0058:  IORWF  77,W
0059:  MOVWF  0D
....................   #endif
....................       
....................    delay_cycles(1);
005A:  NOP
....................    lcd_output_enable(1);
005B:  BSF    0D.0
....................    delay_us(2);
005C:  MOVLW  03
005D:  MOVWF  77
005E:  DECFSZ 77,F
005F:  GOTO   05E
....................    lcd_output_enable(0);
0060:  BCF    0D.0
0061:  RETURN
.................... }
.................... 
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n)
.................... {
....................   #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................   #else
....................    lcd_enable_tris();
*
0068:  MOVLB  01
0069:  BCF    0D.0
....................    lcd_rs_tris();
006A:  BCF    0D.1
....................    lcd_rw_tris();
006B:  BCF    0D.2
....................   #endif
.................... 
....................    lcd_output_rs(0);
006C:  MOVLB  00
006D:  BCF    0D.1
....................    while ( bit_test(lcd_read_byte(),7) ) ;
*
0091:  MOVF   78,W
0092:  MOVWF  41
0093:  BTFSC  41.7
0094:  GOTO   06E
....................    lcd_output_rs(address);
0095:  BTFSS  3F.0
0096:  BCF    0D.1
0097:  BTFSC  3F.0
0098:  BSF    0D.1
....................    delay_cycles(1);
0099:  NOP
....................    lcd_output_rw(0);
009A:  BCF    0D.2
....................    delay_cycles(1);
009B:  NOP
....................    lcd_output_enable(0);
009C:  BCF    0D.0
....................    lcd_send_nibble(n >> 4);
009D:  SWAPF  40,W
009E:  MOVWF  41
009F:  MOVLW  0F
00A0:  ANDWF  41,F
00A1:  MOVF   41,W
00A2:  MOVWF  42
00A3:  CALL   053
....................    lcd_send_nibble(n & 0xf);
00A4:  MOVF   40,W
00A5:  ANDLW  0F
00A6:  MOVWF  41
00A7:  MOVWF  42
00A8:  CALL   053
00A9:  RETURN
.................... }
.................... 
.................... #if defined(LCD_EXTENDED_NEWLINE)
.................... unsigned int8 g_LcdX, g_LcdY;
.................... #endif
.................... 
.................... void lcd_init(void) 
.................... {
....................    unsigned int8 i;
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6};
00AA:  MOVLW  28
00AB:  MOVWF  38
00AC:  MOVLW  0C
00AD:  MOVWF  39
00AE:  MOVLW  01
00AF:  MOVWF  3A
00B0:  MOVLW  06
00B1:  MOVWF  3B
....................                              // These bytes need to be sent to the LCD
....................                              // to start it up.
....................    
.................... 
....................    lcd_output_enable(0);
00B2:  BCF    0D.0
....................    lcd_output_rs(0);
00B3:  BCF    0D.1
....................    lcd_output_rw(0);
00B4:  BCF    0D.2
.................... 
....................  #if defined(__PCB__)
....................    set_tris_lcd(LCD_OUTPUT_MAP);
....................  #else
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7))
....................    output_drive(LCD_DATA4);
....................    output_drive(LCD_DATA5);
....................    output_drive(LCD_DATA6);
....................    output_drive(LCD_DATA7);
....................   #else
....................    lcdtris.data = 0x0;
00B5:  MOVLW  0F
00B6:  MOVLB  01
00B7:  ANDWF  0D,W
00B8:  MOVWF  0D
....................   #endif
....................    lcd_enable_tris();
00B9:  BCF    0D.0
....................    lcd_rs_tris();
00BA:  BCF    0D.1
....................    lcd_rw_tris();
00BB:  BCF    0D.2
....................  #endif
....................     
....................    delay_ms(15);
00BC:  MOVLW  0F
00BD:  MOVLB  00
00BE:  MOVWF  3C
00BF:  CALL   03E
....................    for(i=1;i<=3;++i)
00C0:  MOVLW  01
00C1:  MOVWF  37
00C2:  MOVF   37,W
00C3:  SUBLW  03
00C4:  BTFSS  03.0
00C5:  GOTO   0CE
....................    {
....................        lcd_send_nibble(3);
00C6:  MOVLW  03
00C7:  MOVWF  42
00C8:  CALL   053
....................        delay_ms(5);
00C9:  MOVLW  05
00CA:  MOVWF  3C
00CB:  CALL   03E
00CC:  INCF   37,F
00CD:  GOTO   0C2
....................    }
....................    
....................    lcd_send_nibble(2);
00CE:  MOVLW  02
00CF:  MOVWF  42
00D0:  CALL   053
....................    delay_ms(5);
00D1:  MOVLW  05
00D2:  MOVWF  3C
00D3:  CALL   03E
....................    for(i=0;i<=3;++i)
00D4:  CLRF   37
00D5:  MOVF   37,W
00D6:  SUBLW  03
00D7:  BTFSS  03.0
00D8:  GOTO   0E8
....................       lcd_send_byte(0,LCD_INIT_STRING[i]);
00D9:  MOVLW  18
00DA:  ADDWF  37,W
00DB:  MOVWF  04
00DC:  MOVLW  20
00DD:  MOVWF  05
00DE:  BTFSC  03.0
00DF:  INCF   05,F
00E0:  MOVF   00,W
00E1:  MOVWF  3C
00E2:  CLRF   3F
00E3:  MOVF   3C,W
00E4:  MOVWF  40
00E5:  CALL   068
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
00E6:  INCF   37,F
00E7:  GOTO   0D5
00E8:  MOVLP  00
00E9:  GOTO   27C (RETURN)
....................    g_LcdX = 0;
....................    g_LcdY = 0;
....................   #endif
.................... }
.................... 
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y)
.................... {
....................    unsigned int8 address;
....................    
....................    if(y!=1)
*
0124:  DECFSZ 3C,W
0125:  GOTO   127
0126:  GOTO   12A
....................       address=LCD_LINE_TWO;
0127:  MOVLW  40
0128:  MOVWF  3D
0129:  GOTO   12B
....................    else
....................       address=0;
012A:  CLRF   3D
....................      
....................    address+=x-1;
012B:  MOVLW  01
012C:  SUBWF  3B,W
012D:  ADDWF  3D,F
....................    lcd_send_byte(0,0x80|address);
012E:  MOVF   3D,W
012F:  IORLW  80
0130:  MOVWF  3E
0131:  CLRF   3F
0132:  MOVF   3E,W
0133:  MOVWF  40
0134:  CALL   068
.................... 
....................   #if defined(LCD_EXTENDED_NEWLINE)
0135:  RETURN
....................    g_LcdX = x - 1;
....................    g_LcdY = y - 1;
....................   #endif
.................... }
.................... 
.................... void lcd_putc(char c)
.................... {
....................    switch (c)
0136:  MOVF   3A,W
0137:  XORLW  07
0138:  BTFSC  03.2
0139:  GOTO   144
013A:  XORLW  0B
013B:  BTFSC  03.2
013C:  GOTO   149
013D:  XORLW  06
013E:  BTFSC  03.2
013F:  GOTO   151
0140:  XORLW  02
0141:  BTFSC  03.2
0142:  GOTO   157
0143:  GOTO   15C
....................    {
....................       case '\a'   :  lcd_gotoxy(1,1);     break;
0144:  MOVLW  01
0145:  MOVWF  3B
0146:  MOVWF  3C
0147:  CALL   124
0148:  GOTO   161
.................... 
....................       case '\f'   :  lcd_send_byte(0,1);
0149:  CLRF   3F
014A:  MOVLW  01
014B:  MOVWF  40
014C:  CALL   068
....................                      delay_ms(2);
014D:  MOVLW  02
014E:  MOVWF  3C
014F:  CALL   03E
....................                     #if defined(LCD_EXTENDED_NEWLINE)
....................                      g_LcdX = 0;
....................                      g_LcdY = 0;
....................                     #endif
....................                      break;
0150:  GOTO   161
.................... 
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break;
....................       case '\n'   :
....................          while (g_LcdX++ < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, ' ');
....................          }
....................          lcd_gotoxy(1, g_LcdY+2);
....................          break;
....................      #else
....................       case '\n'   : lcd_gotoxy(1,2);        break;
0151:  MOVLW  01
0152:  MOVWF  3B
0153:  MOVLW  02
0154:  MOVWF  3C
0155:  CALL   124
0156:  GOTO   161
....................      #endif
....................      
....................       case '\b'   : lcd_send_byte(0,0x10);  break;
0157:  CLRF   3F
0158:  MOVLW  10
0159:  MOVWF  40
015A:  CALL   068
015B:  GOTO   161
....................      
....................      #if defined(LCD_EXTENDED_NEWLINE)
....................       default     : 
....................          if (g_LcdX < LCD_LINE_LENGTH)
....................          {
....................             lcd_send_byte(1, c);
....................             g_LcdX++;
....................          }
....................          break;
....................      #else
....................       default     : lcd_send_byte(1,c);     break;
015C:  MOVLW  01
015D:  MOVWF  3F
015E:  MOVF   3A,W
015F:  MOVWF  40
0160:  CALL   068
....................      #endif
....................    }
0161:  RETURN
.................... }
....................  
.................... char lcd_getc(unsigned int8 x, unsigned int8 y)
.................... {
....................    char value;
.................... 
....................    lcd_gotoxy(x,y);
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low
....................    lcd_output_rs(1);
....................    value = lcd_read_byte();
....................    lcd_output_rs(0);
....................    
....................    return(value);
.................... }
.................... 
.................... // write a custom character to the ram
.................... // which is 0-7 and specifies which character array we are modifying.
.................... // ptr points to an array of 8 bytes, where each byte is the next row of
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and
.................... //    usually you will want to leave this byte 0x00.
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr)
.................... {
....................    unsigned int i;
.................... 
....................    which <<= 3;
....................    which &= 0x38;
.................... 
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address
.................... 
....................    for(i=0; i<8; i++)
....................    {
....................       lcd_send_byte(1, *ptr++);
....................    }
....................   
....................    #if defined(LCD_EXTENDED_NEWLINE)
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address
....................    #endif
.................... }
.................... 
.................... void lcd_cursor_on(int1 on)
.................... {
....................    if (on)
....................    {
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON
....................    }
....................    else
....................    {
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF
....................    }
.................... }
.................... 
.................... #endif
.................... 
.................... #define LCD_ENABLE_PIN  PIN_A0
.................... #define LCD_RS_PIN      PIN_A1
.................... //#define LCD_RW_PIN      PIN_A2 // CONECTADO A GND SI NO LO USAMOS
.................... #define LCD_DATA4       PIN_A4
.................... #define LCD_DATA5       PIN_A5
.................... #define LCD_DATA6       PIN_A6
.................... #define LCD_DATA7       PIN_A7
.................... 
.................... 
.................... 
.................... /*****************************************************************************
....................  * Funciones de Inicializacion de Perifericos
....................  ****************************************************************************/
.................... 
.................... void Init_GPIO();
.................... 
.................... /*****************************************************************************
.................... * Estados
.................... ****************************************************************************/
.................... typedef enum {
....................    ESPERAR,     // Espero que se presione una tecla
....................    MOSTRAR      // Muestro la tecla en el LCD
.................... } eEstado;
.................... 
.................... eEstado estado_actual = ESPERAR;
.................... /*****************************************************************************
.................... * Variables globales
.................... ****************************************************************************/
.................... char tecla = 0 ; // tecla que se presiona
.................... int fila_pins[4] = {PIN_B4, PIN_B5, PIN_B6, PIN_B7};
.................... int col_pins[3] = {PIN_B0, PIN_B1, PIN_B2};
.................... 
.................... /*****************************************************************************
.................... * Teclado
.................... ****************************************************************************/
.................... 
.................... char teclado[4][3] = {{'1','2','3'},
....................                       {'4','5','6'},
....................                       {'7','8','9'},
....................                       {'*','0','#'}};
.................... 
.................... /*****************************************************************************
.................... * Funciones
.................... ****************************************************************************/
.................... char read_keypad(void);
.................... void maquina(void);
.................... 
.................... void main()
*
0247:  BCF    20.0
0248:  CLRF   21
0249:  CLRF   36
024A:  CLRF   35
024B:  MOVLB  03
024C:  CLRF   0C
024D:  CLRF   0D
024E:  MOVLB  02
024F:  CLRF   12
0250:  CLRF   11
0251:  CLRF   14
0252:  CLRF   13
0253:  MOVLW  6C
0254:  MOVLB  00
0255:  MOVWF  22
0256:  MOVLW  6D
0257:  MOVWF  23
0258:  MOVLW  6E
0259:  MOVWF  24
025A:  MOVLW  6F
025B:  MOVWF  25
025C:  MOVLW  68
025D:  MOVWF  26
025E:  MOVLW  69
025F:  MOVWF  27
0260:  MOVLW  6A
0261:  MOVWF  28
0262:  MOVLW  31
0263:  MOVWF  29
0264:  MOVLW  32
0265:  MOVWF  2A
0266:  MOVLW  33
0267:  MOVWF  2B
0268:  MOVLW  34
0269:  MOVWF  2C
026A:  MOVLW  35
026B:  MOVWF  2D
026C:  MOVLW  36
026D:  MOVWF  2E
026E:  MOVLW  37
026F:  MOVWF  2F
0270:  MOVLW  38
0271:  MOVWF  30
0272:  MOVLW  39
0273:  MOVWF  31
0274:  MOVLW  2A
0275:  MOVWF  32
0276:  MOVLW  30
0277:  MOVWF  33
0278:  MOVLW  23
0279:  MOVWF  34
.................... {
.................... 
.................... Init_GPIO();
027A:  GOTO   006
.................... lcd_init();
027B:  GOTO   0AA
.................... 
....................    while(TRUE) {
....................    maquina();
027C:  GOTO   162
027D:  GOTO   27C
....................    }
.................... 
.................... }
.................... 
027E:  SLEEP
.................... void Init_GPIO()
.................... {
.................... /* SETEAMOS LOS PINES PB0-PB7 COMO SALIDA */
....................    set_tris_b(0b00000111); //RB0-RB2 = entrada, columnas, RB4-RB7 = Filas, salidas
*
0006:  MOVLW  07
0007:  MOVLB  01
0008:  MOVWF  0D
....................    set_tris_a(0b00000000); // TODO COMO SALIDA EN ESTADO BAJO 
0009:  MOVLW  00
000A:  MOVWF  0C
....................    
....................    port_b_pullups(TRUE);
000B:  MOVLW  01
000C:  MOVLB  04
000D:  MOVWF  0D
000E:  MOVLB  01
000F:  BCF    15.7
....................    
....................    output_high(PIN_B4);
0010:  BCF    0D.4
0011:  MOVLB  02
0012:  BSF    0D.4
....................    output_high(PIN_B5);
0013:  MOVLB  01
0014:  BCF    0D.5
0015:  MOVLB  02
0016:  BSF    0D.5
....................    output_high(PIN_B6);
0017:  MOVLB  01
0018:  BCF    0D.6
0019:  MOVLB  02
001A:  BSF    0D.6
....................    output_high(PIN_B7);
001B:  MOVLB  01
001C:  BCF    0D.7
001D:  MOVLB  02
001E:  BSF    0D.7
....................    
....................    output_low(PIN_A1);
001F:  MOVLB  01
0020:  BCF    0C.1
0021:  MOVLB  02
0022:  BCF    0C.1
....................    output_low(PIN_A2);
0023:  MOVLB  01
0024:  BCF    0C.2
0025:  MOVLB  02
0026:  BCF    0C.2
....................    output_low(PIN_A0);
0027:  MOVLB  01
0028:  BCF    0C.0
0029:  MOVLB  02
002A:  BCF    0C.0
....................    output_low(PIN_A4);
002B:  MOVLB  01
002C:  BCF    0C.4
002D:  MOVLB  02
002E:  BCF    0C.4
....................    output_low(PIN_A5);
002F:  MOVLB  01
0030:  BCF    0C.5
0031:  MOVLB  02
0032:  BCF    0C.5
....................    output_low(PIN_A6);
0033:  MOVLB  01
0034:  BCF    0C.6
0035:  MOVLB  02
0036:  BCF    0C.6
....................    output_low(PIN_A7);
0037:  MOVLB  01
0038:  BCF    0C.7
0039:  MOVLB  02
003A:  BCF    0C.7
003B:  MOVLP  00
003C:  MOVLB  00
003D:  GOTO   27B (RETURN)
.................... }
.................... 
.................... char read_keypad(void) {
....................    int fila;
....................    int col;
....................    for(fila=0; fila<4; fila++) {
*
016C:  CLRF   37
016D:  MOVF   37,W
016E:  SUBLW  03
016F:  BTFSS  03.0
0170:  GOTO   1EB
....................          output_high(PIN_B4);
0171:  MOVLB  01
0172:  BCF    0D.4
0173:  MOVLB  02
0174:  BSF    0D.4
....................          output_high(PIN_B5);
0175:  MOVLB  01
0176:  BCF    0D.5
0177:  MOVLB  02
0178:  BSF    0D.5
....................          output_high(PIN_B6);
0179:  MOVLB  01
017A:  BCF    0D.6
017B:  MOVLB  02
017C:  BSF    0D.6
....................          output_high(PIN_B7);          // Todas filas en 1
017D:  MOVLB  01
017E:  BCF    0D.7
017F:  MOVLB  02
0180:  BSF    0D.7
....................          output_low(fila_pins[fila]);    // Activar una fila en 0
0181:  MOVLW  02
0182:  MOVLB  00
0183:  ADDWF  37,W
0184:  MOVWF  04
0185:  MOVLW  20
0186:  MOVWF  05
0187:  BTFSC  03.0
0188:  INCF   05,F
0189:  MOVF   00,W
018A:  MOVWF  39
018B:  MOVWF  3A
018C:  CLRF   3B
018D:  MOVLW  01
018E:  MOVWF  3D
018F:  CLRF   3C
0190:  CALL   0EA
0191:  MOVF   39,W
0192:  MOVWF  3A
0193:  CLRF   3B
0194:  CLRF   3D
0195:  MOVLW  80
0196:  MOVWF  3C
0197:  CALL   0EA
.................... 
....................       for(col=0; col<3; col++) {
0198:  CLRF   38
0199:  MOVF   38,W
019A:  SUBLW  02
019B:  BTFSS  03.0
019C:  GOTO   1E9
....................          if(!input(col_pins[col])) // si se presiono alguna tecla la col tmb 0
019D:  MOVLW  06
019E:  ADDWF  38,W
019F:  MOVWF  04
01A0:  MOVLW  20
01A1:  MOVWF  05
01A2:  BTFSC  03.0
01A3:  INCF   05,F
01A4:  MOVF   00,W
01A5:  MOVWF  39
01A6:  MOVWF  3A
01A7:  MOVLW  01
01A8:  MOVWF  3B
01A9:  CLRF   3D
01AA:  MOVLW  80
01AB:  MOVWF  3C
01AC:  CALL   0EA
01AD:  MOVF   39,W
01AE:  MOVWF  3A
01AF:  CLRF   3C
01B0:  CLRF   3B
01B1:  GOTO   10A
01B2:  BTFSC  78.0
01B3:  GOTO   1E7
....................             return teclado[fila][col];
01B4:  MOVF   37,W
01B5:  MOVWF  39
01B6:  MOVLW  03
01B7:  MOVWF  3A
*
01DC:  MOVF   38,W
01DD:  ADDWF  78,W
01DE:  ADDLW  09
01DF:  MOVWF  04
01E0:  MOVLW  20
01E1:  MOVWF  05
01E2:  BTFSC  03.0
01E3:  INCF   05,F
01E4:  MOVF   00,W
01E5:  MOVWF  78
01E6:  GOTO   1ED
01E7:  INCF   38,F
01E8:  GOTO   199
....................       }
01E9:  INCF   37,F
01EA:  GOTO   16D
....................    }
....................    return 0; // nada presionado
01EB:  MOVLW  00
01EC:  MOVWF  78
.................... }
.................... 
.................... void maquina() {
....................    switch(estado_actual) {
*
0162:  MOVLW  00
0163:  BTFSC  20.0
0164:  MOVLW  01
0165:  XORLW  00
0166:  BTFSC  03.2
0167:  GOTO   16C
0168:  XORLW  01
0169:  BTFSC  03.2
016A:  GOTO   1F3
016B:  GOTO   245
....................          case ESPERAR:
....................             tecla = read_keypad();       // leo teclado
*
01ED:  MOVF   78,W
01EE:  MOVWF  21
....................             if(tecla != 0) {             // si presionaron algo, no hay 0 en el teclado
01EF:  MOVF   21,F
01F0:  BTFSS  03.2
....................                estado_actual = MOSTRAR;
01F1:  BSF    20.0
....................             }
....................          break;
01F2:  GOTO   245
....................    
....................          case MOSTRAR:
....................             lcd_putc('\f'); // borrar LCD
01F3:  MOVLW  0C
01F4:  MOVWF  3A
01F5:  CALL   136
....................             lcd_putc("Hola");
01F6:  MOVLW  03
01F7:  MOVLB  03
01F8:  MOVWF  11
01F9:  MOVLW  00
01FA:  MOVWF  12
....................             lcd_putc(tecla);  // mostrar tecla
*
0240:  MOVLB  00
0241:  MOVF   21,W
0242:  MOVWF  3A
0243:  CALL   136
....................             estado_actual = ESPERAR;     // volver a esperar
0244:  BCF    20.0
....................          break;
....................    }
0245:  MOVLP  00
0246:  GOTO   27D (RETURN)
.................... }

Configuration Fuses:
   Word  1: 3F84   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1FFF   NOWRT PLL STVREN BORV19 NODEBUG NOLVP
