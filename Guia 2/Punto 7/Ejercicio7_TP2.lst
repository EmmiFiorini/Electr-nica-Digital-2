CCS PCM C Compiler, Version 5.093, 4770               19-sept-25 21:18

               Filename:   C:\Users\santi\OneDrive\Escritorio\EDI2\TP2\Ejercicio7_TP2.lst

               ROM used:   146 words (4%)
                           Largest free fragment is 2048
               RAM used:   12 (3%) at main() level
                           24 (6%) worst case
               Stack used: 1 locations (0 in main + 1 for interrupts)
               Stack size: 16

0000:  MOVLP  00
0001:  GOTO   077
0002:  NOP
*
0004:  CLRF   03
0005:  MOVLP  00
0006:  MOVLB  00
0007:  MOVF   77,W
0008:  MOVWF  20
0009:  MOVF   78,W
000A:  MOVWF  21
000B:  MOVF   79,W
000C:  MOVWF  22
000D:  MOVF   7A,W
000E:  MOVWF  23
000F:  CLRF   05
0010:  MOVLW  91
0011:  MOVWF  04
0012:  BTFSS  00.6
0013:  GOTO   016
0014:  BTFSC  11.6
0015:  GOTO   01F
0016:  MOVF   20,W
0017:  MOVWF  77
0018:  MOVF   21,W
0019:  MOVWF  78
001A:  MOVF   22,W
001B:  MOVWF  79
001C:  MOVF   23,W
001D:  MOVWF  7A
001E:  RETFIE
001F:  MOVLP  00
0020:  GOTO   021
.................... #include <Ejercicio7_TP2.h>
.................... #include <16F1827.h>
.................... //////////// Standard Header file for the PIC16F1827 device ////////////////
.................... ///////////////////////////////////////////////////////////////////////////
.................... ////        (C) Copyright 1996, 2014 Custom Computer Services          ////
.................... //// This source code may only be used by licensed users of the CCS C  ////
.................... //// compiler.  This source code may only be distributed to other      ////
.................... //// licensed users of the CCS C compiler.  No other use, reproduction ////
.................... //// or distribution is permitted without written permission.          ////
.................... //// Derivative programs created using this software in object code    ////
.................... //// form are not restricted in any way.                               ////
.................... ///////////////////////////////////////////////////////////////////////////
.................... #device PIC16F1827
.................... 
.................... #list
.................... 
.................... #device ADC=10
.................... #use delay(internal=4MHz)
.................... 
.................... 
.................... 
.................... #fuses INTRC_IO   // Oscilador interno con pines RA6 y RA7 como GPIO
.................... #fuses NOMCLR     // Desactivo el MCLR
.................... #fuses NOWDT      // Desactivo el watchdog
.................... 
.................... /*****************************************************************************
....................  * Funciones de Inicializacion de Perifericos
....................  ****************************************************************************/
.................... 
.................... void Init_GPIO(void);
.................... void Init_ADC(void);
.................... void Init_DAC(void);
.................... 
.................... /*****************************************************************************
.................... * Variables globales
.................... ****************************************************************************/
.................... 
.................... /* ADC */
.................... unsigned int16 resultado_adc = 0;
.................... int flag_adc = 0;
.................... 
.................... /* DAC */
.................... unsigned int8 resultado_dac = 0;
.................... 
.................... /*****************************************************************************
.................... * Funciones
.................... ****************************************************************************/
.................... 
.................... 
.................... /*****************************************************************************
.................... * Interrupciones
.................... ****************************************************************************/
.................... 
.................... #INT_AD
.................... void ISR_ADC(void) {
.................... 
....................    resultado_adc = read_adc(ADC_READ_ONLY); // Leo conversión (10 bits)
0021:  MOVLW  11
0022:  MOVWF  77
0023:  MOVLB  01
0024:  BTFSS  1D.1
0025:  GOTO   028
0026:  DECFSZ 77,F
0027:  GOTO   024
0028:  MOVF   1B,W
0029:  MOVWF  78
002A:  MOVF   1C,W
002B:  MOVLB  00
002C:  MOVWF  25
002D:  MOVF   78,W
002E:  MOVWF  24
....................    resultado_dac = resultado_adc >> 5; // Paso de 10 bits --> 5 bits (0–31)
002F:  RRF    25,W
0030:  MOVWF  7A
0031:  RRF    24,W
0032:  MOVWF  79
0033:  RRF    7A,F
0034:  RRF    79,F
0035:  RRF    7A,F
0036:  RRF    79,F
0037:  RRF    7A,F
0038:  RRF    79,F
0039:  RRF    7A,F
003A:  RRF    79,F
003B:  MOVF   79,W
003C:  MOVWF  27
....................    
....................    // Mando los 5 bits menos significativos al puerto B (RB0–RB4)
....................    output_b(resultado_dac & 0x1F); //Envío 5 bits al dac
003D:  MOVF   27,W
003E:  ANDLW  1F
003F:  MOVWF  28
0040:  MOVLB  01
0041:  CLRF   0D
0042:  MOVLB  00
0043:  MOVF   28,W
0044:  MOVLB  02
0045:  MOVWF  0D
....................    
....................    flag_adc = 1;
0046:  MOVLW  01
0047:  MOVLB  00
0048:  MOVWF  26
0049:  BCF    11.6
004A:  MOVLP  00
004B:  GOTO   016
.................... }
.................... 
.................... 
.................... void main()
*
0077:  MOVLW  6A
0078:  MOVLB  01
0079:  MOVWF  19
007A:  MOVLB  00
007B:  CLRF   25
007C:  CLRF   24
007D:  CLRF   26
007E:  CLRF   27
007F:  MOVLB  03
0080:  CLRF   0C
0081:  CLRF   0D
0082:  MOVLB  02
0083:  CLRF   12
0084:  CLRF   11
0085:  CLRF   14
0086:  CLRF   13
.................... {
.................... 
.................... Init_GPIO();
0087:  MOVLB  00
0088:  GOTO   04C
.................... Init_ADC();
0089:  GOTO   059
.................... Init_DAC();
008A:  GOTO   071
.................... 
....................    while(TRUE)
....................    {
....................       if(flag_adc == 1) {
008B:  DECFSZ 26,W
008C:  GOTO   091
....................          read_adc(ADC_START_ONLY);
008D:  MOVLB  01
008E:  BSF    1D.1
....................          flag_adc = 0;
008F:  MOVLB  00
0090:  CLRF   26
....................       }
0091:  GOTO   08B
....................    }
.................... 
.................... }
.................... 
0092:  SLEEP
.................... void Init_GPIO()
.................... {
.................... /* SETEAMOS LOS PINES PB1-PB7 COMO SALIDA */
....................    set_tris_a(0b00000001);   // RA0 (AN0) = entrada, resto salida
*
004C:  MOVLW  01
004D:  MOVLB  01
004E:  MOVWF  0C
....................    set_tris_b(0b11100000);   // RB0–RB4 = salida DAC, RB5–RB7 no usados
004F:  MOVLW  E0
0050:  MOVWF  0D
.................... 
....................    output_b(0x00);           // Apago DAC al inicio
0051:  CLRF   0D
0052:  MOVLB  02
0053:  CLRF   0D
....................    
....................    enable_interrupts(GLOBAL);
0054:  MOVLW  C0
0055:  IORWF  0B,F
0056:  MOVLP  00
0057:  MOVLB  00
0058:  GOTO   089 (RETURN)
.................... }
.................... 
.................... void Init_ADC() {
.................... 
....................    setup_adc_ports(sAN0); // Habilito pin AN0 como entrada analógica
0059:  MOVLB  01
005A:  BCF    1E.0
005B:  BCF    1E.1
005C:  BCF    1E.2
005D:  MOVLW  01
005E:  MOVLB  03
005F:  MOVWF  0C
0060:  MOVLW  00
0061:  MOVWF  0D
....................    setup_adc(ADC_CLOCK_INTERNAL);
0062:  MOVLB  01
0063:  BSF    1E.4
0064:  BSF    1E.5
0065:  BCF    1E.6
0066:  BSF    1E.7
0067:  BSF    1D.0
....................    set_adc_channel(0);
0068:  MOVWF  78
0069:  MOVF   1D,W
006A:  ANDLW  83
006B:  IORWF  78,W
006C:  MOVWF  1D
....................    enable_interrupts(INT_AD);
006D:  BSF    11.6
006E:  MOVLP  00
006F:  MOVLB  00
0070:  GOTO   08A (RETURN)
.................... 
.................... }
.................... 
.................... void Init_DAC(void) {
....................    setup_dac(DAC_VSS_VDD|DAC_OUTPUT);
0071:  MOVLW  A0
0072:  MOVLB  02
0073:  MOVWF  18
0074:  MOVLP  00
0075:  MOVLB  00
0076:  GOTO   08B (RETURN)
.................... }
.................... 

Configuration Fuses:
   Word  1: 3F84   INTRC_IO NOWDT PUT NOMCLR NOPROTECT NOCPD BROWNOUT NOCLKOUT IESO FCMEN
   Word  2: 1EFF   NOWRT PLL_SW STVREN BORV19 NODEBUG NOLVP
